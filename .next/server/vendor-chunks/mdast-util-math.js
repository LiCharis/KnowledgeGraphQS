"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-math";
exports.ids = ["vendor-chunks/mdast-util-math"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-math/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/mdast-util-math/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mathFromMarkdown: () => (/* binding */ mathFromMarkdown),\n/* harmony export */   mathToMarkdown: () => (/* binding */ mathToMarkdown)\n/* harmony export */ });\n/* harmony import */ var longest_streak__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! longest-streak */ \"(ssr)/./node_modules/longest-streak/index.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_safe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/safe.js */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/util/safe.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/track.js */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/util/track.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_pattern_compile_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/pattern-compile.js */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js\");\n/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('../index.js').Math} Math\n * @typedef {import('../index.js').InlineMath} InlineMath\n *\n * @typedef ToOptions\n *   Configuration.\n * @property {boolean | null | undefined} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar.\n *\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n *   If you turn this off, you can still use two or more dollars for text math.\n */ \n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */ function mathFromMarkdown() {\n    return {\n        enter: {\n            mathFlow: enterMathFlow,\n            mathFlowFenceMeta: enterMathFlowMeta,\n            mathText: enterMathText\n        },\n        exit: {\n            mathFlow: exitMathFlow,\n            mathFlowFence: exitMathFlowFence,\n            mathFlowFenceMeta: exitMathFlowMeta,\n            mathFlowValue: exitMathData,\n            mathText: exitMathText,\n            mathTextData: exitMathData\n        }\n    };\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMathFlow(token) {\n        this.enter({\n            type: \"math\",\n            meta: null,\n            value: \"\",\n            data: {\n                hName: \"div\",\n                hProperties: {\n                    className: [\n                        \"math\",\n                        \"math-display\"\n                    ]\n                },\n                hChildren: [\n                    {\n                        type: \"text\",\n                        value: \"\"\n                    }\n                ]\n            }\n        }, token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMathFlowMeta() {\n        this.buffer();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMathFlowMeta() {\n        const data = this.resume();\n        const node = /** @type {Math} */ this.stack[this.stack.length - 1];\n        node.meta = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMathFlowFence() {\n        // Exit if this is the closing fence.\n        if (this.getData(\"mathFlowInside\")) return;\n        this.buffer();\n        this.setData(\"mathFlowInside\", true);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMathFlow(token) {\n        const data = this.resume().replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, \"\");\n        const node = /** @type {Math} */ this.exit(token);\n        node.value = data;\n        // @ts-expect-error: we defined it.\n        node.data.hChildren[0].value = data;\n        this.setData(\"mathFlowInside\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMathText(token) {\n        this.enter({\n            type: \"inlineMath\",\n            value: \"\",\n            data: {\n                hName: \"span\",\n                hProperties: {\n                    className: [\n                        \"math\",\n                        \"math-inline\"\n                    ]\n                },\n                hChildren: [\n                    {\n                        type: \"text\",\n                        value: \"\"\n                    }\n                ]\n            }\n        }, token);\n        this.buffer();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMathText(token) {\n        const data = this.resume();\n        const node = /** @type {Math} */ this.exit(token);\n        node.value = data;\n        // @ts-expect-error: we defined it.\n        node.data.hChildren[0].value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMathData(token) {\n        this.config.enter.data.call(this, token);\n        this.config.exit.data.call(this, token);\n    }\n}\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {ToOptions | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */ function mathToMarkdown(options) {\n    let single = (options || {}).singleDollarTextMath;\n    if (single === null || single === undefined) {\n        single = true;\n    }\n    inlineMath.peek = inlineMathPeek;\n    return {\n        unsafe: [\n            {\n                character: \"\\r\",\n                inConstruct: \"mathFlowMeta\"\n            },\n            {\n                character: \"\\n\",\n                inConstruct: \"mathFlowMeta\"\n            },\n            {\n                character: \"$\",\n                after: single ? undefined : \"\\\\$\",\n                inConstruct: \"phrasing\"\n            },\n            {\n                character: \"$\",\n                inConstruct: \"mathFlowMeta\"\n            },\n            {\n                atBreak: true,\n                character: \"$\",\n                after: \"\\\\$\"\n            }\n        ],\n        handlers: {\n            math,\n            inlineMath\n        }\n    };\n    /**\n   * @type {ToMarkdownHandle}\n   * @param {Math} node\n   */ // To do: next major: rename `context` to state, `safeOptions` to info.\n    // Note: fixing this code? Please also fix the similar code for code:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/code.js>\n    function math(node, _, context, safeOptions) {\n        const raw = node.value || \"\";\n        const tracker = (0,mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__.track)(safeOptions);\n        const sequence = \"$\".repeat(Math.max((0,longest_streak__WEBPACK_IMPORTED_MODULE_1__.longestStreak)(raw, \"$\") + 1, 2));\n        const exit = context.enter(\"mathFlow\");\n        let value = tracker.move(sequence);\n        if (node.meta) {\n            const subexit = context.enter(\"mathFlowMeta\");\n            value += tracker.move((0,mdast_util_to_markdown_lib_util_safe_js__WEBPACK_IMPORTED_MODULE_2__.safe)(context, node.meta, {\n                before: value,\n                after: \"\\n\",\n                encode: [\n                    \"$\"\n                ],\n                ...tracker.current()\n            }));\n            subexit();\n        }\n        value += tracker.move(\"\\n\");\n        if (raw) {\n            value += tracker.move(raw + \"\\n\");\n        }\n        value += tracker.move(sequence);\n        exit();\n        return value;\n    }\n    /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineMath} node\n   */ // Note: fixing this code? Please also fix the similar code for inline code:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/inline-code.js>\n    //\n    // To do: next major: rename `context` to state.\n    // To do: next major: use `state` (`safe`, `track`, `patternCompile`).\n    function inlineMath(node, _, context) {\n        let value = node.value || \"\";\n        let size = 1;\n        if (!single) size++;\n        // If there is a single dollar sign on its own in the math, use a fence of\n        // two.\n        // If there are two in a row, use one.\n        while(new RegExp(\"(^|[^$])\" + \"\\\\$\".repeat(size) + \"([^$]|$)\").test(value)){\n            size++;\n        }\n        const sequence = \"$\".repeat(size);\n        // If this is not just spaces or eols (tabs don’t count), and either the\n        // first and last character are a space or eol, or the first or last\n        // character are dollar signs, then pad with spaces.\n        if (// Contains non-space.\n        /[^ \\r\\n]/.test(value) && // Starts with space and ends with space.\n        (/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value) || // Starts or ends with dollar.\n        /^\\$|\\$$/.test(value))) {\n            value = \" \" + value + \" \";\n        }\n        let index = -1;\n        // We have a potential problem: certain characters after eols could result in\n        // blocks being seen.\n        // For example, if someone injected the string `'\\n# b'`, then that would\n        // result in an ATX heading.\n        // We can’t escape characters in `inlineMath`, but because eols are\n        // transformed to spaces when going from markdown to HTML anyway, we can swap\n        // them out.\n        while(++index < context.unsafe.length){\n            const pattern = context.unsafe[index];\n            const expression = (0,mdast_util_to_markdown_lib_util_pattern_compile_js__WEBPACK_IMPORTED_MODULE_3__.patternCompile)(pattern);\n            /** @type {RegExpExecArray | null} */ let match;\n            // Only look for `atBreak`s.\n            // Btw: note that `atBreak` patterns will always start the regex at LF or\n            // CR.\n            if (!pattern.atBreak) continue;\n            while(match = expression.exec(value)){\n                let position = match.index;\n                // Support CRLF (patterns only look for one of the characters).\n                if (value.codePointAt(position) === 10 /* `\\n` */  && value.codePointAt(position - 1) === 13 /* `\\r` */ ) {\n                    position--;\n                }\n                value = value.slice(0, position) + \" \" + value.slice(match.index + 1);\n            }\n        }\n        return sequence + value + sequence;\n    }\n    /**\n   * @returns {string}\n   */ function inlineMathPeek() {\n        return \"$\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-math/lib/index.js\n");

/***/ })

};
;