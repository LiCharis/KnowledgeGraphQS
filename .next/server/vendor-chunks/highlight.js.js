/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight.js";
exports.ids = ["vendor-chunks/highlight.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight.js/lib/core.js":
/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error(\"map is read-only\");\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error(\"set is read-only\");\n        };\n    }\n    // Freeze self\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach(function(name) {\n        var prop = obj[name];\n        // Freeze prop if it is an object\n        if (typeof prop == \"object\" && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n    return obj;\n}\nvar deepFreezeEs6 = deepFreeze;\nvar _default = deepFreeze;\ndeepFreezeEs6.default = _default;\nclass Response {\n    /**\n   * @param {CompiledMode} mode\n   */ constructor(mode){\n        // eslint-disable-next-line no-undefined\n        if (mode.data === undefined) mode.data = {};\n        this.data = mode.data;\n    }\n    ignoreMatch() {\n        this.ignore = true;\n    }\n}\n/**\n * @param {string} value\n * @returns {string}\n */ function escapeHTML(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n}\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */ function inherit(original, ...objects) {\n    /** @type Record<string,any> */ const result = Object.create(null);\n    for(const key in original){\n        result[key] = original[key];\n    }\n    objects.forEach(function(obj) {\n        for(const key in obj){\n            result[key] = obj[key];\n        }\n    });\n    return /** @type {T} */ result;\n}\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */ /** @typedef {{kind?: string, sublanguage?: boolean}} Node */ /** @typedef {{walk: (r: Renderer) => void}} Tree */ /** */ const SPAN_CLOSE = \"</span>\";\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */ const emitsWrappingTags = (node)=>{\n    return !!node.kind;\n};\n/** @type {Renderer} */ class HTMLRenderer {\n    /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */ constructor(parseTree, options){\n        this.buffer = \"\";\n        this.classPrefix = options.classPrefix;\n        parseTree.walk(this);\n    }\n    /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */ addText(text) {\n        this.buffer += escapeHTML(text);\n    }\n    /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */ openNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        let className = node.kind;\n        if (!node.sublanguage) {\n            className = `${this.classPrefix}${className}`;\n        }\n        this.span(className);\n    }\n    /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */ closeNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        this.buffer += SPAN_CLOSE;\n    }\n    /**\n   * returns the accumulated buffer\n  */ value() {\n        return this.buffer;\n    }\n    // helpers\n    /**\n   * Builds a span element\n   *\n   * @param {string} className */ span(className) {\n        this.buffer += `<span class=\"${className}\">`;\n    }\n}\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */ /** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */ /**  */ class TokenTree {\n    constructor(){\n        /** @type DataNode */ this.rootNode = {\n            children: []\n        };\n        this.stack = [\n            this.rootNode\n        ];\n    }\n    get top() {\n        return this.stack[this.stack.length - 1];\n    }\n    get root() {\n        return this.rootNode;\n    }\n    /** @param {Node} node */ add(node) {\n        this.top.children.push(node);\n    }\n    /** @param {string} kind */ openNode(kind) {\n        /** @type Node */ const node = {\n            kind,\n            children: []\n        };\n        this.add(node);\n        this.stack.push(node);\n    }\n    closeNode() {\n        if (this.stack.length > 1) {\n            return this.stack.pop();\n        }\n        // eslint-disable-next-line no-undefined\n        return undefined;\n    }\n    closeAllNodes() {\n        while(this.closeNode());\n    }\n    toJSON() {\n        return JSON.stringify(this.rootNode, null, 4);\n    }\n    /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */ walk(builder) {\n        // this does not\n        return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n    }\n    /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */ static _walk(builder, node) {\n        if (typeof node === \"string\") {\n            builder.addText(node);\n        } else if (node.children) {\n            builder.openNode(node);\n            node.children.forEach((child)=>this._walk(builder, child));\n            builder.closeNode(node);\n        }\n        return builder;\n    }\n    /**\n   * @param {Node} node\n   */ static _collapse(node) {\n        if (typeof node === \"string\") return;\n        if (!node.children) return;\n        if (node.children.every((el)=>typeof el === \"string\")) {\n            // node.text = node.children.join(\"\");\n            // delete node.children;\n            node.children = [\n                node.children.join(\"\")\n            ];\n        } else {\n            node.children.forEach((child)=>{\n                TokenTree._collapse(child);\n            });\n        }\n    }\n}\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addKeyword(text, kind)\n  - addText(text)\n  - addSublanguage(emitter, subLanguageName)\n  - finalize()\n  - openNode(kind)\n  - closeNode()\n  - closeAllNodes()\n  - toHTML()\n\n*/ /**\n * @implements {Emitter}\n */ class TokenTreeEmitter extends TokenTree {\n    /**\n   * @param {*} options\n   */ constructor(options){\n        super();\n        this.options = options;\n    }\n    /**\n   * @param {string} text\n   * @param {string} kind\n   */ addKeyword(text, kind) {\n        if (text === \"\") {\n            return;\n        }\n        this.openNode(kind);\n        this.addText(text);\n        this.closeNode();\n    }\n    /**\n   * @param {string} text\n   */ addText(text) {\n        if (text === \"\") {\n            return;\n        }\n        this.add(text);\n    }\n    /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */ addSublanguage(emitter, name) {\n        /** @type DataNode */ const node = emitter.root;\n        node.kind = name;\n        node.sublanguage = true;\n        this.add(node);\n    }\n    toHTML() {\n        const renderer = new HTMLRenderer(this, this.options);\n        return renderer.value();\n    }\n    finalize() {\n        return true;\n    }\n}\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ function escape(value) {\n    return new RegExp(value.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"), \"m\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */ function either(...args) {\n    const joined = \"(\" + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/**\n * @param {RegExp} re\n * @returns {number}\n */ function countMatchGroups(re) {\n    return new RegExp(re.toString() + \"|\").exec(\"\").length - 1;\n}\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */ function startsWith(re, lexeme) {\n    const match = re && re.exec(lexeme);\n    return match && match.index === 0;\n}\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {string} separator\n * @returns {string}\n */ function join(regexps, separator = \"|\") {\n    // backreferenceRe matches an open parenthesis or backreference. To avoid\n    // an incorrect parse, it additionally matches the following:\n    // - [...] elements, where the meaning of parentheses and escapes change\n    // - other escape sequences, so we do not misparse escape sequences as\n    //   interesting elements\n    // - non-matching or lookahead parentheses, which do not capture. These\n    //   follow the '(' with a '?'.\n    const backreferenceRe = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n    let numCaptures = 0;\n    let ret = \"\";\n    for(let i = 0; i < regexps.length; i++){\n        numCaptures += 1;\n        const offset = numCaptures;\n        let re = source(regexps[i]);\n        if (i > 0) {\n            ret += separator;\n        }\n        ret += \"(\";\n        while(re.length > 0){\n            const match = backreferenceRe.exec(re);\n            if (match == null) {\n                ret += re;\n                break;\n            }\n            ret += re.substring(0, match.index);\n            re = re.substring(match.index + match[0].length);\n            if (match[0][0] === \"\\\\\" && match[1]) {\n                // Adjust the backreference.\n                ret += \"\\\\\" + String(Number(match[1]) + offset);\n            } else {\n                ret += match[0];\n                if (match[0] === \"(\") {\n                    numCaptures++;\n                }\n            }\n        }\n        ret += \")\";\n    }\n    return ret;\n}\n// Common regexps\nconst IDENT_RE = \"[a-zA-Z]\\\\w*\";\nconst UNDERSCORE_IDENT_RE = \"[a-zA-Z_]\\\\w*\";\nconst NUMBER_RE = \"\\\\b\\\\d+(\\\\.\\\\d+)?\";\nconst C_NUMBER_RE = \"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\"; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = \"\\\\b(0b[01]+)\"; // 0b...\nconst RE_STARTERS_RE = \"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\";\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/ const SHEBANG = (opts = {})=>{\n    const beginShebang = /^#![ ]*\\//;\n    if (opts.binary) {\n        opts.begin = concat(beginShebang, /.*\\b/, opts.binary, /\\b.*/);\n    }\n    return inherit({\n        className: \"meta\",\n        begin: beginShebang,\n        end: /$/,\n        relevance: 0,\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            if (m.index !== 0) resp.ignoreMatch();\n        }\n    }, opts);\n};\n// Common modes\nconst BACKSLASH_ESCAPE = {\n    begin: \"\\\\\\\\[\\\\s\\\\S]\",\n    relevance: 0\n};\nconst APOS_STRING_MODE = {\n    className: \"string\",\n    begin: \"'\",\n    end: \"'\",\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst QUOTE_STRING_MODE = {\n    className: \"string\",\n    begin: '\"',\n    end: '\"',\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */ const COMMENT = function(begin, end, modeOptions = {}) {\n    const mode = inherit({\n        className: \"comment\",\n        begin,\n        end,\n        contains: []\n    }, modeOptions);\n    mode.contains.push(PHRASAL_WORDS_MODE);\n    mode.contains.push({\n        className: \"doctag\",\n        begin: \"(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):\",\n        relevance: 0\n    });\n    return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT(\"//\", \"$\");\nconst C_BLOCK_COMMENT_MODE = COMMENT(\"/\\\\*\", \"\\\\*/\");\nconst HASH_COMMENT_MODE = COMMENT(\"#\", \"$\");\nconst NUMBER_MODE = {\n    className: \"number\",\n    begin: NUMBER_RE,\n    relevance: 0\n};\nconst C_NUMBER_MODE = {\n    className: \"number\",\n    begin: C_NUMBER_RE,\n    relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n    className: \"number\",\n    begin: BINARY_NUMBER_RE,\n    relevance: 0\n};\nconst CSS_NUMBER_MODE = {\n    className: \"number\",\n    begin: NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n    relevance: 0\n};\nconst REGEXP_MODE = {\n    // this outer rule makes sure we actually have a WHOLE regex and not simply\n    // an expression such as:\n    //\n    //     3 / something\n    //\n    // (which will then blow up when regex's `illegal` sees the newline)\n    begin: /(?=\\/[^/\\n]*\\/)/,\n    contains: [\n        {\n            className: \"regexp\",\n            begin: /\\//,\n            end: /\\/[gimuy]*/,\n            illegal: /\\n/,\n            contains: [\n                BACKSLASH_ESCAPE,\n                {\n                    begin: /\\[/,\n                    end: /\\]/,\n                    relevance: 0,\n                    contains: [\n                        BACKSLASH_ESCAPE\n                    ]\n                }\n            ]\n        }\n    ]\n};\nconst TITLE_MODE = {\n    className: \"title\",\n    begin: IDENT_RE,\n    relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n    className: \"title\",\n    begin: UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\nconst METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: \"\\\\.\\\\s*\" + UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */ const END_SAME_AS_BEGIN = function(mode) {\n    return Object.assign(mode, {\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1];\n        },\n        /** @type {ModeCallback} */ \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    });\n};\nvar MODES = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    IDENT_RE: IDENT_RE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    NUMBER_RE: NUMBER_RE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    COMMENT: COMMENT,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    NUMBER_MODE: NUMBER_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    CSS_NUMBER_MODE: CSS_NUMBER_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\n    METHOD_GUARD: METHOD_GUARD,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\n});\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n// ------\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */ function skipIfhasPrecedingDot(match, response) {\n    const before = match.input[match.index - 1];\n    if (before === \".\") {\n        response.ignoreMatch();\n    }\n}\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */ function beginKeywords(mode, parent) {\n    if (!parent) return;\n    if (!mode.beginKeywords) return;\n    // for languages with keywords that include non-word characters checking for\n    // a word boundary is not sufficient, so instead we check for a word boundary\n    // or whitespace - this does no harm in any case since our keyword engine\n    // doesn't allow spaces in keywords anyways and we still check for the boundary\n    // first\n    mode.begin = \"\\\\b(\" + mode.beginKeywords.split(\" \").join(\"|\") + \")(?!\\\\.)(?=\\\\b|\\\\s)\";\n    mode.__beforeBegin = skipIfhasPrecedingDot;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n    delete mode.beginKeywords;\n}\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */ function compileIllegal(mode, _parent) {\n    if (!Array.isArray(mode.illegal)) return;\n    mode.illegal = either(...mode.illegal);\n}\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */ function compileMatch(mode, _parent) {\n    if (!mode.match) return;\n    if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n    mode.begin = mode.match;\n    delete mode.match;\n}\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */ function compileRelevance(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 1;\n}\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n    \"of\",\n    \"and\",\n    \"for\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"if\",\n    \"then\",\n    \"parent\",\n    \"list\",\n    \"value\" // common variable name\n];\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string>} rawKeywords\n * @param {boolean} caseInsensitive\n */ function compileKeywords(rawKeywords, caseInsensitive) {\n    /** @type KeywordDict */ const compiledKeywords = {};\n    if (typeof rawKeywords === \"string\") {\n        splitAndCompile(\"keyword\", rawKeywords);\n    } else {\n        Object.keys(rawKeywords).forEach(function(className) {\n            splitAndCompile(className, rawKeywords[className]);\n        });\n    }\n    return compiledKeywords;\n    // ---\n    /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} className\n   * @param {string} keywordList\n   */ function splitAndCompile(className, keywordList) {\n        if (caseInsensitive) {\n            keywordList = keywordList.toLowerCase();\n        }\n        keywordList.split(\" \").forEach(function(keyword) {\n            const pair = keyword.split(\"|\");\n            compiledKeywords[pair[0]] = [\n                className,\n                scoreForKeyword(pair[0], pair[1])\n            ];\n        });\n    }\n}\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */ function scoreForKeyword(keyword, providedScore) {\n    // manual scores always win over common keywords\n    // so you can force a score of 1 if you really insist\n    if (providedScore) {\n        return Number(providedScore);\n    }\n    return commonKeyword(keyword) ? 0 : 1;\n}\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */ function commonKeyword(keyword) {\n    return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n// compilation\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @param {{plugins: HLJSPlugin[]}} opts\n * @returns {CompiledLanguage}\n */ function compileLanguage(language, { plugins }) {\n    /**\n   * Builds a regex with the case sensativility of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */ function langRe(value, global) {\n        return new RegExp(source(value), \"m\" + (language.case_insensitive ? \"i\" : \"\") + (global ? \"g\" : \"\"));\n    }\n    /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */ class MultiRegex {\n        constructor(){\n            this.matchIndexes = {};\n            // @ts-ignore\n            this.regexes = [];\n            this.matchAt = 1;\n            this.position = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            opts.position = this.position++;\n            // @ts-ignore\n            this.matchIndexes[this.matchAt] = opts;\n            this.regexes.push([\n                opts,\n                re\n            ]);\n            this.matchAt += countMatchGroups(re) + 1;\n        }\n        compile() {\n            if (this.regexes.length === 0) {\n                // avoids the need to check length every time exec is called\n                // @ts-ignore\n                this.exec = ()=>null;\n            }\n            const terminators = this.regexes.map((el)=>el[1]);\n            this.matcherRe = langRe(join(terminators), true);\n            this.lastIndex = 0;\n        }\n        /** @param {string} s */ exec(s) {\n            this.matcherRe.lastIndex = this.lastIndex;\n            const match = this.matcherRe.exec(s);\n            if (!match) {\n                return null;\n            }\n            // eslint-disable-next-line no-undefined\n            const i = match.findIndex((el, i)=>i > 0 && el !== undefined);\n            // @ts-ignore\n            const matchData = this.matchIndexes[i];\n            // trim off any earlier non-relevant match groups (ie, the other regex\n            // match groups that make up the multi-matcher)\n            match.splice(0, i);\n            return Object.assign(match, matchData);\n        }\n    }\n    /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */ class ResumableMultiRegex {\n        constructor(){\n            // @ts-ignore\n            this.rules = [];\n            // @ts-ignore\n            this.multiRegexes = [];\n            this.count = 0;\n            this.lastIndex = 0;\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        getMatcher(index) {\n            if (this.multiRegexes[index]) return this.multiRegexes[index];\n            const matcher = new MultiRegex();\n            this.rules.slice(index).forEach(([re, opts])=>matcher.addRule(re, opts));\n            matcher.compile();\n            this.multiRegexes[index] = matcher;\n            return matcher;\n        }\n        resumingScanAtSamePosition() {\n            return this.regexIndex !== 0;\n        }\n        considerAll() {\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            this.rules.push([\n                re,\n                opts\n            ]);\n            if (opts.type === \"begin\") this.count++;\n        }\n        /** @param {string} s */ exec(s) {\n            const m = this.getMatcher(this.regexIndex);\n            m.lastIndex = this.lastIndex;\n            let result = m.exec(s);\n            // The following is because we have no easy way to say \"resume scanning at the\n            // existing position but also skip the current rule ONLY\". What happens is\n            // all prior rules are also skipped which can result in matching the wrong\n            // thing. Example of matching \"booger\":\n            // our matcher is [string, \"booger\", number]\n            //\n            // ....booger....\n            // if \"booger\" is ignored then we'd really need a regex to scan from the\n            // SAME position for only: [string, number] but ignoring \"booger\" (if it\n            // was the first match), a simple resume would scan ahead who knows how\n            // far looking only for \"number\", ignoring potential string matches (or\n            // future \"booger\" matches that might be valid.)\n            // So what we do: We execute two matchers, one resuming at the same\n            // position, but the second full matcher starting at the position after:\n            //     /--- resume first regex match here (for [number])\n            //     |/---- full match here for [string, \"booger\", number]\n            //     vv\n            // ....booger....\n            // Which ever results in a match first is then used. So this 3-4 step\n            // process essentially allows us to say \"match at this position, excluding\n            // a prior rule that was ignored\".\n            //\n            // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n            // 2. Resume matching for [number]\n            // 3. Match at index + 1 for [string, \"booger\", number]\n            // 4. If #2 and #3 result in matches, which came first?\n            if (this.resumingScanAtSamePosition()) {\n                if (result && result.index === this.lastIndex) ;\n                else {\n                    const m2 = this.getMatcher(0);\n                    m2.lastIndex = this.lastIndex + 1;\n                    result = m2.exec(s);\n                }\n            }\n            if (result) {\n                this.regexIndex += result.position + 1;\n                if (this.regexIndex === this.count) {\n                    // wrap-around to considering all matches again\n                    this.considerAll();\n                }\n            }\n            return result;\n        }\n    }\n    /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */ function buildModeRegex(mode) {\n        const mm = new ResumableMultiRegex();\n        mode.contains.forEach((term)=>mm.addRule(term.begin, {\n                rule: term,\n                type: \"begin\"\n            }));\n        if (mode.terminatorEnd) {\n            mm.addRule(mode.terminatorEnd, {\n                type: \"end\"\n            });\n        }\n        if (mode.illegal) {\n            mm.addRule(mode.illegal, {\n                type: \"illegal\"\n            });\n        }\n        return mm;\n    }\n    /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */ /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */ function compileMode(mode, parent) {\n        const cmode = /** @type CompiledMode */ mode;\n        if (mode.compiled) return cmode;\n        [\n            // do this early so compiler extensions generally don't have to worry about\n            // the distinction between match/begin\n            compileMatch\n        ].forEach((ext)=>ext(mode, parent));\n        language.compilerExtensions.forEach((ext)=>ext(mode, parent));\n        // __beforeBegin is considered private API, internal use only\n        mode.__beforeBegin = null;\n        [\n            beginKeywords,\n            // do this later so compiler extensions that come earlier have access to the\n            // raw array if they wanted to perhaps manipulate it, etc.\n            compileIllegal,\n            // default to 1 relevance if not specified\n            compileRelevance\n        ].forEach((ext)=>ext(mode, parent));\n        mode.compiled = true;\n        let keywordPattern = null;\n        if (typeof mode.keywords === \"object\") {\n            keywordPattern = mode.keywords.$pattern;\n            delete mode.keywords.$pattern;\n        }\n        if (mode.keywords) {\n            mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n        }\n        // both are not allowed\n        if (mode.lexemes && keywordPattern) {\n            throw new Error(\"ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) \");\n        }\n        // `mode.lexemes` was the old standard before we added and now recommend\n        // using `keywords.$pattern` to pass the keyword pattern\n        keywordPattern = keywordPattern || mode.lexemes || /\\w+/;\n        cmode.keywordPatternRe = langRe(keywordPattern, true);\n        if (parent) {\n            if (!mode.begin) mode.begin = /\\B|\\b/;\n            cmode.beginRe = langRe(mode.begin);\n            if (mode.endSameAsBegin) mode.end = mode.begin;\n            if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n            if (mode.end) cmode.endRe = langRe(mode.end);\n            cmode.terminatorEnd = source(mode.end) || \"\";\n            if (mode.endsWithParent && parent.terminatorEnd) {\n                cmode.terminatorEnd += (mode.end ? \"|\" : \"\") + parent.terminatorEnd;\n            }\n        }\n        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ mode.illegal);\n        if (!mode.contains) mode.contains = [];\n        mode.contains = [].concat(...mode.contains.map(function(c) {\n            return expandOrCloneMode(c === \"self\" ? mode : c);\n        }));\n        mode.contains.forEach(function(c) {\n            compileMode(/** @type Mode */ c, cmode);\n        });\n        if (mode.starts) {\n            compileMode(mode.starts, parent);\n        }\n        cmode.matcher = buildModeRegex(cmode);\n        return cmode;\n    }\n    if (!language.compilerExtensions) language.compilerExtensions = [];\n    // self is not valid at the top-level\n    if (language.contains && language.contains.includes(\"self\")) {\n        throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n    }\n    // we need a null object, which inherit will guarantee\n    language.classNameAliases = inherit(language.classNameAliases || {});\n    return compileMode(/** @type Mode */ language);\n}\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */ function dependencyOnParent(mode) {\n    if (!mode) return false;\n    return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */ function expandOrCloneMode(mode) {\n    if (mode.variants && !mode.cachedVariants) {\n        mode.cachedVariants = mode.variants.map(function(variant) {\n            return inherit(mode, {\n                variants: null\n            }, variant);\n        });\n    }\n    // EXPAND\n    // if we have variants then essentially \"replace\" the mode with the variants\n    // this happens in compileMode, where this function is called from\n    if (mode.cachedVariants) {\n        return mode.cachedVariants;\n    }\n    // CLONE\n    // if we have dependencies on parents then we need a unique\n    // instance of ourselves, so we can be reused with many\n    // different parents without issue\n    if (dependencyOnParent(mode)) {\n        return inherit(mode, {\n            starts: mode.starts ? inherit(mode.starts) : null\n        });\n    }\n    if (Object.isFrozen(mode)) {\n        return inherit(mode);\n    }\n    // no special dependency issues, just return ourselves\n    return mode;\n}\nvar version = \"10.5.0\";\n// @ts-nocheck\nfunction hasValueOrEmptyAttribute(value) {\n    return Boolean(value || value === \"\");\n}\nfunction BuildVuePlugin(hljs) {\n    const Component = {\n        props: [\n            \"language\",\n            \"code\",\n            \"autodetect\"\n        ],\n        data: function() {\n            return {\n                detectedLanguage: \"\",\n                unknownLanguage: false\n            };\n        },\n        computed: {\n            className () {\n                if (this.unknownLanguage) return \"\";\n                return \"hljs \" + this.detectedLanguage;\n            },\n            highlighted () {\n                // no idea what language to use, return raw code\n                if (!this.autoDetect && !hljs.getLanguage(this.language)) {\n                    console.warn(`The language \"${this.language}\" you specified could not be found.`);\n                    this.unknownLanguage = true;\n                    return escapeHTML(this.code);\n                }\n                let result = {};\n                if (this.autoDetect) {\n                    result = hljs.highlightAuto(this.code);\n                    this.detectedLanguage = result.language;\n                } else {\n                    result = hljs.highlight(this.language, this.code, this.ignoreIllegals);\n                    this.detectedLanguage = this.language;\n                }\n                return result.value;\n            },\n            autoDetect () {\n                return !this.language || hasValueOrEmptyAttribute(this.autodetect);\n            },\n            ignoreIllegals () {\n                return true;\n            }\n        },\n        // this avoids needing to use a whole Vue compilation pipeline just\n        // to build Highlight.js\n        render (createElement) {\n            return createElement(\"pre\", {}, [\n                createElement(\"code\", {\n                    class: this.className,\n                    domProps: {\n                        innerHTML: this.highlighted\n                    }\n                })\n            ]);\n        }\n    };\n    const VuePlugin = {\n        install (Vue) {\n            Vue.component(\"highlightjs\", Component);\n        }\n    };\n    return {\n        Component,\n        VuePlugin\n    };\n}\n/* plugin itself */ /** @type {HLJSPlugin} */ const mergeHTMLPlugin = {\n    \"after:highlightBlock\": ({ block, result, text })=>{\n        const originalStream = nodeStream(block);\n        if (!originalStream.length) return;\n        const resultNode = document.createElement(\"div\");\n        resultNode.innerHTML = result.value;\n        result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n};\n/* Stream merging support functions */ /**\n * @typedef Event\n * @property {'start'|'stop'} event\n * @property {number} offset\n * @property {Node} node\n */ /**\n * @param {Node} node\n */ function tag(node) {\n    return node.nodeName.toLowerCase();\n}\n/**\n * @param {Node} node\n */ function nodeStream(node) {\n    /** @type Event[] */ const result = [];\n    (function _nodeStream(node, offset) {\n        for(let child = node.firstChild; child; child = child.nextSibling){\n            if (child.nodeType === 3) {\n                offset += child.nodeValue.length;\n            } else if (child.nodeType === 1) {\n                result.push({\n                    event: \"start\",\n                    offset: offset,\n                    node: child\n                });\n                offset = _nodeStream(child, offset);\n                // Prevent void elements from having an end tag that would actually\n                // double them in the output. There are more void elements in HTML\n                // but we list only those realistically expected in code display.\n                if (!tag(child).match(/br|hr|img|input/)) {\n                    result.push({\n                        event: \"stop\",\n                        offset: offset,\n                        node: child\n                    });\n                }\n            }\n        }\n        return offset;\n    })(node, 0);\n    return result;\n}\n/**\n * @param {any} original - the original stream\n * @param {any} highlighted - stream of the highlighted source\n * @param {string} value - the original source itself\n */ function mergeStreams(original, highlighted, value) {\n    let processed = 0;\n    let result = \"\";\n    const nodeStack = [];\n    function selectStream() {\n        if (!original.length || !highlighted.length) {\n            return original.length ? original : highlighted;\n        }\n        if (original[0].offset !== highlighted[0].offset) {\n            return original[0].offset < highlighted[0].offset ? original : highlighted;\n        }\n        /*\n    To avoid starting the stream just before it should stop the order is\n    ensured that original always starts first and closes last:\n\n    if (event1 == 'start' && event2 == 'start')\n      return original;\n    if (event1 == 'start' && event2 == 'stop')\n      return highlighted;\n    if (event1 == 'stop' && event2 == 'start')\n      return original;\n    if (event1 == 'stop' && event2 == 'stop')\n      return highlighted;\n\n    ... which is collapsed to:\n    */ return highlighted[0].event === \"start\" ? original : highlighted;\n    }\n    /**\n   * @param {Node} node\n   */ function open(node) {\n        /** @param {Attr} attr */ function attributeString(attr) {\n            return \" \" + attr.nodeName + '=\"' + escapeHTML(attr.value) + '\"';\n        }\n        // @ts-ignore\n        result += \"<\" + tag(node) + [].map.call(node.attributes, attributeString).join(\"\") + \">\";\n    }\n    /**\n   * @param {Node} node\n   */ function close(node) {\n        result += \"</\" + tag(node) + \">\";\n    }\n    /**\n   * @param {Event} event\n   */ function render(event) {\n        (event.event === \"start\" ? open : close)(event.node);\n    }\n    while(original.length || highlighted.length){\n        let stream = selectStream();\n        result += escapeHTML(value.substring(processed, stream[0].offset));\n        processed = stream[0].offset;\n        if (stream === original) {\n            /*\n      On any opening or closing tag of the original markup we first close\n      the entire highlighted node stack, then render the original tag along\n      with all the following original tags at the same offset and then\n      reopen all the tags on the highlighted stack.\n      */ nodeStack.reverse().forEach(close);\n            do {\n                render(stream.splice(0, 1)[0]);\n                stream = selectStream();\n            }while (stream === original && stream.length && stream[0].offset === processed);\n            nodeStack.reverse().forEach(open);\n        } else {\n            if (stream[0].event === \"start\") {\n                nodeStack.push(stream[0].node);\n            } else {\n                nodeStack.pop();\n            }\n            render(stream.splice(0, 1)[0]);\n        }\n    }\n    return result + escapeHTML(value.substr(processed));\n}\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/ /**\n * @param {string} message\n */ const error = (message)=>{\n    console.error(message);\n};\n/**\n * @param {string} message\n * @param {any} args\n */ const warn = (message, ...args)=>{\n    console.log(`WARN: ${message}`, ...args);\n};\n/**\n * @param {string} version\n * @param {string} message\n */ const deprecated = (version, message)=>{\n    console.log(`Deprecated as of ${version}. ${message}`);\n};\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/ const escape$1 = escapeHTML;\nconst inherit$1 = inherit;\nconst NO_MATCH = Symbol(\"nomatch\");\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */ const HLJS = function(hljs) {\n    // Global internal variables used within the highlight.js library.\n    /** @type {Record<string, Language>} */ const languages = Object.create(null);\n    /** @type {Record<string, string>} */ const aliases = Object.create(null);\n    /** @type {HLJSPlugin[]} */ const plugins = [];\n    // safe/production mode - swallows more errors, tries to keep running\n    // even if a single syntax or parse hits a fatal error\n    let SAFE_MODE = true;\n    const fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\n    const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n    /** @type {Language} */ const PLAINTEXT_LANGUAGE = {\n        disableAutodetect: true,\n        name: \"Plain text\",\n        contains: []\n    };\n    // Global options used when within external APIs. This is modified when\n    // calling the `hljs.configure` function.\n    /** @type HLJSOptions */ let options = {\n        noHighlightRe: /^(no-?highlight)$/i,\n        languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n        classPrefix: \"hljs-\",\n        tabReplace: null,\n        useBR: false,\n        languages: null,\n        // beta configuration options, subject to change, welcome to discuss\n        // https://github.com/highlightjs/highlight.js/issues/1086\n        __emitter: TokenTreeEmitter\n    };\n    /* Utility functions */ /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */ function shouldNotHighlight(languageName) {\n        return options.noHighlightRe.test(languageName);\n    }\n    /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */ function blockLanguage(block) {\n        let classes = block.className + \" \";\n        classes += block.parentNode ? block.parentNode.className : \"\";\n        // language-* takes precedence over non-prefixed class names.\n        const match = options.languageDetectRe.exec(classes);\n        if (match) {\n            const language = getLanguage(match[1]);\n            if (!language) {\n                warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n                warn(\"Falling back to no-highlight mode for this block.\", block);\n            }\n            return language ? match[1] : \"no-highlight\";\n        }\n        return classes.split(/\\s+/).find((_class)=>shouldNotHighlight(_class) || getLanguage(_class));\n    }\n    /**\n   * Core highlighting function.\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */ function highlight(languageName, code, ignoreIllegals, continuation) {\n        /** @type {BeforeHighlightContext} */ const context = {\n            code,\n            language: languageName\n        };\n        // the plugin can change the desired language or the code to be highlighted\n        // just be changing the object it was passed\n        fire(\"before:highlight\", context);\n        // a before plugin can usurp the result completely by providing it's own\n        // in which case we don't even need to call highlight\n        const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals, continuation);\n        result.code = context.code;\n        // the plugin can change anything in result to suite it\n        fire(\"after:highlight\", result);\n        return result;\n    }\n    /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */ function _highlight(languageName, code, ignoreIllegals, continuation) {\n        const codeToHighlight = code;\n        /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {RegExpMatchArray} match - regexp match data\n     * @returns {KeywordData | false}\n     */ function keywordData(mode, match) {\n            const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\n            return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\n        }\n        function processKeywords() {\n            if (!top.keywords) {\n                emitter.addText(modeBuffer);\n                return;\n            }\n            let lastIndex = 0;\n            top.keywordPatternRe.lastIndex = 0;\n            let match = top.keywordPatternRe.exec(modeBuffer);\n            let buf = \"\";\n            while(match){\n                buf += modeBuffer.substring(lastIndex, match.index);\n                const data = keywordData(top, match);\n                if (data) {\n                    const [kind, keywordRelevance] = data;\n                    emitter.addText(buf);\n                    buf = \"\";\n                    relevance += keywordRelevance;\n                    const cssClass = language.classNameAliases[kind] || kind;\n                    emitter.addKeyword(match[0], cssClass);\n                } else {\n                    buf += match[0];\n                }\n                lastIndex = top.keywordPatternRe.lastIndex;\n                match = top.keywordPatternRe.exec(modeBuffer);\n            }\n            buf += modeBuffer.substr(lastIndex);\n            emitter.addText(buf);\n        }\n        function processSubLanguage() {\n            if (modeBuffer === \"\") return;\n            /** @type HighlightResult */ let result = null;\n            if (typeof top.subLanguage === \"string\") {\n                if (!languages[top.subLanguage]) {\n                    emitter.addText(modeBuffer);\n                    return;\n                }\n                result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n                continuations[top.subLanguage] = /** @type {CompiledMode} */ result.top;\n            } else {\n                result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n            }\n            // Counting embedded language score towards the host language may be disabled\n            // with zeroing the containing mode relevance. Use case in point is Markdown that\n            // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n            // score.\n            if (top.relevance > 0) {\n                relevance += result.relevance;\n            }\n            emitter.addSublanguage(result.emitter, result.language);\n        }\n        function processBuffer() {\n            if (top.subLanguage != null) {\n                processSubLanguage();\n            } else {\n                processKeywords();\n            }\n            modeBuffer = \"\";\n        }\n        /**\n     * @param {Mode} mode - new mode to start\n     */ function startNewMode(mode) {\n            if (mode.className) {\n                emitter.openNode(language.classNameAliases[mode.className] || mode.className);\n            }\n            top = Object.create(mode, {\n                parent: {\n                    value: top\n                }\n            });\n            return top;\n        }\n        /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */ function endOfMode(mode, match, matchPlusRemainder) {\n            let matched = startsWith(mode.endRe, matchPlusRemainder);\n            if (matched) {\n                if (mode[\"on:end\"]) {\n                    const resp = new Response(mode);\n                    mode[\"on:end\"](match, resp);\n                    if (resp.ignore) matched = false;\n                }\n                if (matched) {\n                    while(mode.endsParent && mode.parent){\n                        mode = mode.parent;\n                    }\n                    return mode;\n                }\n            }\n            // even if on:end fires an `ignore` it's still possible\n            // that we might trigger the end node because of a parent mode\n            if (mode.endsWithParent) {\n                return endOfMode(mode.parent, match, matchPlusRemainder);\n            }\n        }\n        /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */ function doIgnore(lexeme) {\n            if (top.matcher.regexIndex === 0) {\n                // no more regexs to potentially match here, so we move the cursor forward one\n                // space\n                modeBuffer += lexeme[0];\n                return 1;\n            } else {\n                // no need to move the cursor, we still have additional regexes to try and\n                // match at this very spot\n                resumeScanAtSamePosition = true;\n                return 0;\n            }\n        }\n        /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */ function doBeginMatch(match) {\n            const lexeme = match[0];\n            const newMode = match.rule;\n            const resp = new Response(newMode);\n            // first internal before callbacks, then the public ones\n            const beforeCallbacks = [\n                newMode.__beforeBegin,\n                newMode[\"on:begin\"]\n            ];\n            for (const cb of beforeCallbacks){\n                if (!cb) continue;\n                cb(match, resp);\n                if (resp.ignore) return doIgnore(lexeme);\n            }\n            if (newMode && newMode.endSameAsBegin) {\n                newMode.endRe = escape(lexeme);\n            }\n            if (newMode.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (newMode.excludeBegin) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (!newMode.returnBegin && !newMode.excludeBegin) {\n                    modeBuffer = lexeme;\n                }\n            }\n            startNewMode(newMode);\n            // if (mode[\"after:begin\"]) {\n            //   let resp = new Response(mode);\n            //   mode[\"after:begin\"](match, resp);\n            // }\n            return newMode.returnBegin ? 0 : lexeme.length;\n        }\n        /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */ function doEndMatch(match) {\n            const lexeme = match[0];\n            const matchPlusRemainder = codeToHighlight.substr(match.index);\n            const endMode = endOfMode(top, match, matchPlusRemainder);\n            if (!endMode) {\n                return NO_MATCH;\n            }\n            const origin = top;\n            if (origin.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (!(origin.returnEnd || origin.excludeEnd)) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (origin.excludeEnd) {\n                    modeBuffer = lexeme;\n                }\n            }\n            do {\n                if (top.className) {\n                    emitter.closeNode();\n                }\n                if (!top.skip && !top.subLanguage) {\n                    relevance += top.relevance;\n                }\n                top = top.parent;\n            }while (top !== endMode.parent);\n            if (endMode.starts) {\n                if (endMode.endSameAsBegin) {\n                    endMode.starts.endRe = endMode.endRe;\n                }\n                startNewMode(endMode.starts);\n            }\n            return origin.returnEnd ? 0 : lexeme.length;\n        }\n        function processContinuations() {\n            const list = [];\n            for(let current = top; current !== language; current = current.parent){\n                if (current.className) {\n                    list.unshift(current.className);\n                }\n            }\n            list.forEach((item)=>emitter.openNode(item));\n        }\n        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */ let lastMatch = {};\n        /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */ function processLexeme(textBeforeMatch, match) {\n            const lexeme = match && match[0];\n            // add non-matched text to the current mode buffer\n            modeBuffer += textBeforeMatch;\n            if (lexeme == null) {\n                processBuffer();\n                return 0;\n            }\n            // we've found a 0 width match and we're stuck, so we need to advance\n            // this happens when we have badly behaved rules that have optional matchers to the degree that\n            // sometimes they can end up matching nothing at all\n            // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n            if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n                // spit the \"skipped\" character that our regex choked on back into the output sequence\n                modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n                if (!SAFE_MODE) {\n                    /** @type {AnnotatedError} */ const err = new Error(\"0 width match regex\");\n                    err.languageName = languageName;\n                    err.badRule = lastMatch.rule;\n                    throw err;\n                }\n                return 1;\n            }\n            lastMatch = match;\n            if (match.type === \"begin\") {\n                return doBeginMatch(match);\n            } else if (match.type === \"illegal\" && !ignoreIllegals) {\n                // illegal match, we do not continue processing\n                /** @type {AnnotatedError} */ const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || \"<unnamed>\") + '\"');\n                err.mode = top;\n                throw err;\n            } else if (match.type === \"end\") {\n                const processed = doEndMatch(match);\n                if (processed !== NO_MATCH) {\n                    return processed;\n                }\n            }\n            // edge case for when illegal matches $ (end of line) which is technically\n            // a 0 width match but not a begin/end match so it's not caught by the\n            // first handler (when ignoreIllegals is true)\n            if (match.type === \"illegal\" && lexeme === \"\") {\n                // advance so we aren't stuck in an infinite loop\n                return 1;\n            }\n            // infinite loops are BAD, this is a last ditch catch all. if we have a\n            // decent number of iterations yet our index (cursor position in our\n            // parsing) still 3x behind our index then something is very wrong\n            // so we bail\n            if (iterations > 100000 && iterations > match.index * 3) {\n                const err = new Error(\"potential infinite loop, way more iterations than matches\");\n                throw err;\n            }\n            /*\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\n      the end (but is not, because it is not an exact match to the beginning) will\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\n\n      This causes no real harm other than stopping a few times too many.\n      */ modeBuffer += lexeme;\n            return lexeme.length;\n        }\n        const language = getLanguage(languageName);\n        if (!language) {\n            error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n            throw new Error('Unknown language: \"' + languageName + '\"');\n        }\n        const md = compileLanguage(language, {\n            plugins\n        });\n        let result = \"\";\n        /** @type {CompiledMode} */ let top = continuation || md;\n        /** @type Record<string,CompiledMode> */ const continuations = {}; // keep continuations for sub-languages\n        const emitter = new options.__emitter(options);\n        processContinuations();\n        let modeBuffer = \"\";\n        let relevance = 0;\n        let index = 0;\n        let iterations = 0;\n        let resumeScanAtSamePosition = false;\n        try {\n            top.matcher.considerAll();\n            for(;;){\n                iterations++;\n                if (resumeScanAtSamePosition) {\n                    // only regexes not matched previously will now be\n                    // considered for a potential match\n                    resumeScanAtSamePosition = false;\n                } else {\n                    top.matcher.considerAll();\n                }\n                top.matcher.lastIndex = index;\n                const match = top.matcher.exec(codeToHighlight);\n                // console.log(\"match\", match[0], match.rule && match.rule.begin)\n                if (!match) break;\n                const beforeMatch = codeToHighlight.substring(index, match.index);\n                const processedCount = processLexeme(beforeMatch, match);\n                index = match.index + processedCount;\n            }\n            processLexeme(codeToHighlight.substr(index));\n            emitter.closeAllNodes();\n            emitter.finalize();\n            result = emitter.toHTML();\n            return {\n                relevance: relevance,\n                value: result,\n                language: languageName,\n                illegal: false,\n                emitter: emitter,\n                top: top\n            };\n        } catch (err) {\n            if (err.message && err.message.includes(\"Illegal\")) {\n                return {\n                    illegal: true,\n                    illegalBy: {\n                        msg: err.message,\n                        context: codeToHighlight.slice(index - 100, index + 100),\n                        mode: err.mode\n                    },\n                    sofar: result,\n                    relevance: 0,\n                    value: escape$1(codeToHighlight),\n                    emitter: emitter\n                };\n            } else if (SAFE_MODE) {\n                return {\n                    illegal: false,\n                    relevance: 0,\n                    value: escape$1(codeToHighlight),\n                    emitter: emitter,\n                    language: languageName,\n                    top: top,\n                    errorRaised: err\n                };\n            } else {\n                throw err;\n            }\n        }\n    }\n    /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */ function justTextHighlightResult(code) {\n        const result = {\n            relevance: 0,\n            emitter: new options.__emitter(options),\n            value: escape$1(code),\n            illegal: false,\n            top: PLAINTEXT_LANGUAGE\n        };\n        result.emitter.addText(code);\n        return result;\n    }\n    /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */ function highlightAuto(code, languageSubset) {\n        languageSubset = languageSubset || options.languages || Object.keys(languages);\n        const plaintext = justTextHighlightResult(code);\n        const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name)=>_highlight(name, code, false));\n        results.unshift(plaintext); // plaintext is always an option\n        const sorted = results.sort((a, b)=>{\n            // sort base on relevance\n            if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n            // always award the tie to the base language\n            // ie if C++ and Arduino are tied, it's more likely to be C++\n            if (a.language && b.language) {\n                if (getLanguage(a.language).supersetOf === b.language) {\n                    return 1;\n                } else if (getLanguage(b.language).supersetOf === a.language) {\n                    return -1;\n                }\n            }\n            // otherwise say they are equal, which has the effect of sorting on\n            // relevance while preserving the original ordering - which is how ties\n            // have historically been settled, ie the language that comes first always\n            // wins in the case of a tie\n            return 0;\n        });\n        const [best, secondBest] = sorted;\n        /** @type {AutoHighlightResult} */ const result = best;\n        result.second_best = secondBest;\n        return result;\n    }\n    /**\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n    @param {string} html\n    @returns {string}\n  */ function fixMarkup(html) {\n        if (!(options.tabReplace || options.useBR)) {\n            return html;\n        }\n        return html.replace(fixMarkupRe, (match)=>{\n            if (match === \"\\n\") {\n                return options.useBR ? \"<br>\" : match;\n            } else if (options.tabReplace) {\n                return match.replace(/\\t/g, options.tabReplace);\n            }\n            return match;\n        });\n    }\n    /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */ function updateClassName(element, currentLang, resultLang) {\n        const language = currentLang ? aliases[currentLang] : resultLang;\n        element.classList.add(\"hljs\");\n        if (language) element.classList.add(language);\n    }\n    /** @type {HLJSPlugin} */ const brPlugin = {\n        \"before:highlightBlock\": ({ block })=>{\n            if (options.useBR) {\n                block.innerHTML = block.innerHTML.replace(/\\n/g, \"\").replace(/<br[ /]*>/g, \"\\n\");\n            }\n        },\n        \"after:highlightBlock\": ({ result })=>{\n            if (options.useBR) {\n                result.value = result.value.replace(/\\n/g, \"<br>\");\n            }\n        }\n    };\n    const TAB_REPLACE_RE = /^(<[^>]+>|\\t)+/gm;\n    /** @type {HLJSPlugin} */ const tabReplacePlugin = {\n        \"after:highlightBlock\": ({ result })=>{\n            if (options.tabReplace) {\n                result.value = result.value.replace(TAB_REPLACE_RE, (m)=>m.replace(/\\t/g, options.tabReplace));\n            }\n        }\n    };\n    /**\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\n   * two optional parameters for fixMarkup.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */ function highlightBlock(element) {\n        /** @type HTMLElement */ let node = null;\n        const language = blockLanguage(element);\n        if (shouldNotHighlight(language)) return;\n        fire(\"before:highlightBlock\", {\n            block: element,\n            language: language\n        });\n        node = element;\n        const text = node.textContent;\n        const result = language ? highlight(language, text, true) : highlightAuto(text);\n        fire(\"after:highlightBlock\", {\n            block: element,\n            result,\n            text\n        });\n        element.innerHTML = result.value;\n        updateClassName(element, language, result.language);\n        element.result = {\n            language: result.language,\n            // TODO: remove with version 11.0\n            re: result.relevance,\n            relavance: result.relevance\n        };\n        if (result.second_best) {\n            element.second_best = {\n                language: result.second_best.language,\n                // TODO: remove with version 11.0\n                re: result.second_best.relevance,\n                relavance: result.second_best.relevance\n            };\n        }\n    }\n    /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */ function configure(userOptions) {\n        if (userOptions.useBR) {\n            deprecated(\"10.3.0\", \"'useBR' will be removed entirely in v11.0\");\n            deprecated(\"10.3.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2559\");\n        }\n        options = inherit$1(options, userOptions);\n    }\n    /**\n   * Highlights to all <pre><code> blocks on a page\n   *\n   * @type {Function & {called?: boolean}}\n   */ const initHighlighting = ()=>{\n        if (initHighlighting.called) return;\n        initHighlighting.called = true;\n        const blocks = document.querySelectorAll(\"pre code\");\n        blocks.forEach(highlightBlock);\n    };\n    // Higlights all when DOMContentLoaded fires\n    function initHighlightingOnLoad() {\n        // @ts-ignore\n        window.addEventListener(\"DOMContentLoaded\", initHighlighting, false);\n    }\n    /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */ function registerLanguage(languageName, languageDefinition) {\n        let lang = null;\n        try {\n            lang = languageDefinition(hljs);\n        } catch (error$1) {\n            error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n            // hard or soft error\n            if (!SAFE_MODE) {\n                throw error$1;\n            } else {\n                error(error$1);\n            }\n            // languages that have serious errors are replaced with essentially a\n            // \"plaintext\" stand-in so that the code blocks will still get normal\n            // css classes applied to them - and one bad language won't break the\n            // entire highlighter\n            lang = PLAINTEXT_LANGUAGE;\n        }\n        // give it a temporary name if it doesn't have one in the meta-data\n        if (!lang.name) lang.name = languageName;\n        languages[languageName] = lang;\n        lang.rawDefinition = languageDefinition.bind(null, hljs);\n        if (lang.aliases) {\n            registerAliases(lang.aliases, {\n                languageName\n            });\n        }\n    }\n    /**\n   * @returns {string[]} List of language internal names\n   */ function listLanguages() {\n        return Object.keys(languages);\n    }\n    /**\n    intended usage: When one language truly requires another\n\n    Unlike `getLanguage`, this will throw when the requested language\n    is not available.\n\n    @param {string} name - name of the language to fetch/require\n    @returns {Language | never}\n  */ function requireLanguage(name) {\n        deprecated(\"10.4.0\", \"requireLanguage will be removed entirely in v11.\");\n        deprecated(\"10.4.0\", \"Please see https://github.com/highlightjs/highlight.js/pull/2844\");\n        const lang = getLanguage(name);\n        if (lang) {\n            return lang;\n        }\n        const err = new Error(\"The '{}' language is required, but not loaded.\".replace(\"{}\", name));\n        throw err;\n    }\n    /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */ function getLanguage(name) {\n        name = (name || \"\").toLowerCase();\n        return languages[name] || languages[aliases[name]];\n    }\n    /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */ function registerAliases(aliasList, { languageName }) {\n        if (typeof aliasList === \"string\") {\n            aliasList = [\n                aliasList\n            ];\n        }\n        aliasList.forEach((alias)=>{\n            aliases[alias] = languageName;\n        });\n    }\n    /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */ function autoDetection(name) {\n        const lang = getLanguage(name);\n        return lang && !lang.disableAutodetect;\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function addPlugin(plugin) {\n        plugins.push(plugin);\n    }\n    /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */ function fire(event, args) {\n        const cb = event;\n        plugins.forEach(function(plugin) {\n            if (plugin[cb]) {\n                plugin[cb](args);\n            }\n        });\n    }\n    /**\n  Note: fixMarkup is deprecated and will be removed entirely in v11\n\n  @param {string} arg\n  @returns {string}\n  */ function deprecateFixMarkup(arg) {\n        deprecated(\"10.2.0\", \"fixMarkup will be removed entirely in v11.0\");\n        deprecated(\"10.2.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2534\");\n        return fixMarkup(arg);\n    }\n    /* Interface definition */ Object.assign(hljs, {\n        highlight,\n        highlightAuto,\n        fixMarkup: deprecateFixMarkup,\n        highlightBlock,\n        configure,\n        initHighlighting,\n        initHighlightingOnLoad,\n        registerLanguage,\n        listLanguages,\n        getLanguage,\n        registerAliases,\n        requireLanguage,\n        autoDetection,\n        inherit: inherit$1,\n        addPlugin,\n        // plugins for frameworks\n        vuePlugin: BuildVuePlugin(hljs).VuePlugin\n    });\n    hljs.debugMode = function() {\n        SAFE_MODE = false;\n    };\n    hljs.safeMode = function() {\n        SAFE_MODE = true;\n    };\n    hljs.versionString = version;\n    for(const key in MODES){\n        // @ts-ignore\n        if (typeof MODES[key] === \"object\") {\n            // @ts-ignore\n            deepFreezeEs6(MODES[key]);\n        }\n    }\n    // merge all the modes/regexs into our main object\n    Object.assign(hljs, MODES);\n    // built-in plugins, likely to be moved out of core in the future\n    hljs.addPlugin(brPlugin); // slated to be removed in v11\n    hljs.addPlugin(mergeHTMLPlugin);\n    hljs.addPlugin(tabReplacePlugin);\n    return hljs;\n};\n// export an \"instance\" of the highlighter\nvar highlight = HLJS({});\nmodule.exports = highlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/bash.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/bash.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common\n*/ /** @type LanguageFn */ function bash(hljs) {\n    const VAR = {};\n    const BRACED_VAR = {\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n            \"self\",\n            {\n                begin: /:-/,\n                contains: [\n                    VAR\n                ]\n            } // default values\n        ]\n    };\n    Object.assign(VAR, {\n        className: \"variable\",\n        variants: [\n            {\n                begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/, // negative look-ahead tries to avoid matching patterns that are not\n                // Perl at all like $ident$, @ident@, etc.\n                `(?![\\\\w\\\\d])(?![$])`)\n            },\n            BRACED_VAR\n        ]\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\(/,\n        end: /\\)/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ]\n    };\n    const HERE_DOC = {\n        begin: /<<-?\\s*(?=\\w+)/,\n        starts: {\n            contains: [\n                hljs.END_SAME_AS_BEGIN({\n                    begin: /(\\w+)/,\n                    end: /(\\w+)/,\n                    className: \"string\"\n                })\n            ]\n        }\n    };\n    const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            VAR,\n            SUBST\n        ]\n    };\n    SUBST.contains.push(QUOTE_STRING);\n    const ESCAPED_QUOTE = {\n        className: \"\",\n        begin: /\\\\\"/\n    };\n    const APOS_STRING = {\n        className: \"string\",\n        begin: /'/,\n        end: /'/\n    };\n    const ARITHMETIC = {\n        begin: /\\$\\(\\(/,\n        end: /\\)\\)/,\n        contains: [\n            {\n                begin: /\\d+#[0-9a-f]+/,\n                className: \"number\"\n            },\n            hljs.NUMBER_MODE,\n            VAR\n        ]\n    };\n    const SH_LIKE_SHELLS = [\n        \"fish\",\n        \"bash\",\n        \"zsh\",\n        \"sh\",\n        \"csh\",\n        \"ksh\",\n        \"tcsh\",\n        \"dash\",\n        \"scsh\"\n    ];\n    const KNOWN_SHEBANG = hljs.SHEBANG({\n        binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n        relevance: 10\n    });\n    const FUNCTION = {\n        className: \"function\",\n        begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n        returnBegin: true,\n        contains: [\n            hljs.inherit(hljs.TITLE_MODE, {\n                begin: /\\w[\\w\\d_]*/\n            })\n        ],\n        relevance: 0\n    };\n    return {\n        name: \"Bash\",\n        aliases: [\n            \"sh\",\n            \"zsh\"\n        ],\n        keywords: {\n            $pattern: /\\b[a-z._-]+\\b/,\n            keyword: \"if then else elif fi for while in do done case esac function\",\n            literal: \"true false\",\n            built_in: // Shell built-ins\n            // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n            \"break cd continue eval exec exit export getopts hash pwd readonly return shift test times \" + \"trap umask unset \" + // Bash built-ins\n            \"alias bind builtin caller command declare echo enable help let local logout mapfile printf \" + \"read readarray source type typeset ulimit unalias \" + // Shell modifiers\n            \"set shopt \" + // Zsh built-ins\n            \"autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles \" + \"compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate \" + \"fc fg float functions getcap getln history integer jobs kill limit log noglob popd print \" + \"pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit \" + \"unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof \" + \"zpty zregexparse zsocket zstyle ztcp\"\n        },\n        contains: [\n            KNOWN_SHEBANG,\n            hljs.SHEBANG(),\n            FUNCTION,\n            ARITHMETIC,\n            hljs.HASH_COMMENT_MODE,\n            HERE_DOC,\n            QUOTE_STRING,\n            ESCAPED_QUOTE,\n            APOS_STRING,\n            VAR\n        ]\n    };\n}\nmodule.exports = bash;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/css.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/css.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/*\nLanguage: CSS\nCategory: common, css\nWebsite: https://developer.mozilla.org/en-US/docs/Web/CSS\n*/ /** @type LanguageFn */ function css(hljs) {\n    var FUNCTION_LIKE = {\n        begin: /[\\w-]+\\(/,\n        returnBegin: true,\n        contains: [\n            {\n                className: \"built_in\",\n                begin: /[\\w-]+/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    hljs.APOS_STRING_MODE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.CSS_NUMBER_MODE\n                ]\n            }\n        ]\n    };\n    var ATTRIBUTE = {\n        className: \"attribute\",\n        begin: /\\S/,\n        end: \":\",\n        excludeEnd: true,\n        starts: {\n            endsWithParent: true,\n            excludeEnd: true,\n            contains: [\n                FUNCTION_LIKE,\n                hljs.CSS_NUMBER_MODE,\n                hljs.QUOTE_STRING_MODE,\n                hljs.APOS_STRING_MODE,\n                hljs.C_BLOCK_COMMENT_MODE,\n                {\n                    className: \"number\",\n                    begin: \"#[0-9A-Fa-f]+\"\n                },\n                {\n                    className: \"meta\",\n                    begin: \"!important\"\n                }\n            ]\n        }\n    };\n    var AT_IDENTIFIER = \"@[a-z-]+\"; // @font-face\n    var AT_MODIFIERS = \"and or not only\";\n    var AT_PROPERTY_RE = /@-?\\w[\\w]*(-\\w+)*/; // @-webkit-keyframes\n    var IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    var RULE = {\n        begin: /([*]\\s?)?(?:[A-Z_.\\-\\\\]+|--[a-zA-Z0-9_-]+)\\s*(\\/\\*\\*\\/)?:/,\n        returnBegin: true,\n        end: \";\",\n        endsWithParent: true,\n        contains: [\n            ATTRIBUTE\n        ]\n    };\n    return {\n        name: \"CSS\",\n        case_insensitive: true,\n        illegal: /[=|'\\$]/,\n        contains: [\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"selector-id\",\n                begin: /#[A-Za-z0-9_-]+/\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.\" + IDENT_RE\n            },\n            {\n                className: \"selector-attr\",\n                begin: /\\[/,\n                end: /\\]/,\n                illegal: \"$\",\n                contains: [\n                    hljs.APOS_STRING_MODE,\n                    hljs.QUOTE_STRING_MODE\n                ]\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: /:(:)?[a-zA-Z0-9_+()\"'.-]+/\n            },\n            // matching these here allows us to treat them more like regular CSS\n            // rules so everything between the {} gets regular rule highlighting,\n            // which is what we want for page and font-face\n            {\n                begin: \"@(page|font-face)\",\n                lexemes: AT_IDENTIFIER,\n                keywords: \"@page @font-face\"\n            },\n            {\n                begin: \"@\",\n                end: \"[{;]\",\n                // because it doesn’t let it to be parsed as\n                // a rule set but instead drops parser into\n                // the default mode which is how it should be.\n                illegal: /:/,\n                returnBegin: true,\n                contains: [\n                    {\n                        className: \"keyword\",\n                        begin: AT_PROPERTY_RE\n                    },\n                    {\n                        begin: /\\s/,\n                        endsWithParent: true,\n                        excludeEnd: true,\n                        relevance: 0,\n                        keywords: AT_MODIFIERS,\n                        contains: [\n                            {\n                                begin: /[a-z-]+:/,\n                                className: \"attribute\"\n                            },\n                            hljs.APOS_STRING_MODE,\n                            hljs.QUOTE_STRING_MODE,\n                            hljs.CSS_NUMBER_MODE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"selector-tag\",\n                begin: IDENT_RE,\n                relevance: 0\n            },\n            {\n                begin: /\\{/,\n                end: /\\}/,\n                illegal: /\\S/,\n                contains: [\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    {\n                        begin: /;/\n                    },\n                    RULE\n                ]\n            }\n        ]\n    };\n}\nmodule.exports = css;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Lbm93bGVkZ2VHcmFwaFFTLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2Nzcy5qcz8wZDFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogQ1NTXG5DYXRlZ29yeTogY29tbW9uLCBjc3NcbldlYnNpdGU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTU1xuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIGNzcyhobGpzKSB7XG4gIHZhciBGVU5DVElPTl9MSUtFID0ge1xuICAgIGJlZ2luOiAvW1xcdy1dK1xcKC8sIHJldHVybkJlZ2luOiB0cnVlLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2J1aWx0X2luJyxcbiAgICAgICAgYmVnaW46IC9bXFx3LV0rL1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IC9cXCgvLCBlbmQ6IC9cXCkvLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgICAgIGhsanMuQ1NTX05VTUJFUl9NT0RFLFxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9O1xuICB2YXIgQVRUUklCVVRFID0ge1xuICAgIGNsYXNzTmFtZTogJ2F0dHJpYnV0ZScsXG4gICAgYmVnaW46IC9cXFMvLCBlbmQ6ICc6JywgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICBzdGFydHM6IHtcbiAgICAgIGVuZHNXaXRoUGFyZW50OiB0cnVlLCBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgRlVOQ1RJT05fTElLRSxcbiAgICAgICAgaGxqcy5DU1NfTlVNQkVSX01PREUsXG4gICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ251bWJlcicsIGJlZ2luOiAnI1swLTlBLUZhLWZdKydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ21ldGEnLCBiZWdpbjogJyFpbXBvcnRhbnQnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIHZhciBBVF9JREVOVElGSUVSID0gJ0BbYS16LV0rJzsgLy8gQGZvbnQtZmFjZVxuICB2YXIgQVRfTU9ESUZJRVJTID0gXCJhbmQgb3Igbm90IG9ubHlcIjtcbiAgdmFyIEFUX1BST1BFUlRZX1JFID0gL0AtP1xcd1tcXHddKigtXFx3KykqLzsgLy8gQC13ZWJraXQta2V5ZnJhbWVzXG4gIHZhciBJREVOVF9SRSA9ICdbYS16QS1aLV1bYS16QS1aMC05Xy1dKic7XG4gIHZhciBSVUxFID0ge1xuICAgIGJlZ2luOiAvKFsqXVxccz8pPyg/OltBLVpfLlxcLVxcXFxdK3wtLVthLXpBLVowLTlfLV0rKVxccyooXFwvXFwqXFwqXFwvKT86LywgcmV0dXJuQmVnaW46IHRydWUsIGVuZDogJzsnLCBlbmRzV2l0aFBhcmVudDogdHJ1ZSxcbiAgICBjb250YWluczogW1xuICAgICAgQVRUUklCVVRFXG4gICAgXVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0NTUycsXG4gICAgY2FzZV9pbnNlbnNpdGl2ZTogdHJ1ZSxcbiAgICBpbGxlZ2FsOiAvWz18J1xcJF0vLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci1pZCcsIGJlZ2luOiAvI1tBLVphLXowLTlfLV0rL1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0b3ItY2xhc3MnLCBiZWdpbjogJ1xcXFwuJyArIElERU5UX1JFXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci1hdHRyJyxcbiAgICAgICAgYmVnaW46IC9cXFsvLCBlbmQ6IC9cXF0vLFxuICAgICAgICBpbGxlZ2FsOiAnJCcsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3NlbGVjdG9yLXBzZXVkbycsXG4gICAgICAgIGJlZ2luOiAvOig6KT9bYS16QS1aMC05XysoKVwiJy4tXSsvXG4gICAgICB9LFxuICAgICAgLy8gbWF0Y2hpbmcgdGhlc2UgaGVyZSBhbGxvd3MgdXMgdG8gdHJlYXQgdGhlbSBtb3JlIGxpa2UgcmVndWxhciBDU1NcbiAgICAgIC8vIHJ1bGVzIHNvIGV2ZXJ5dGhpbmcgYmV0d2VlbiB0aGUge30gZ2V0cyByZWd1bGFyIHJ1bGUgaGlnaGxpZ2h0aW5nLFxuICAgICAgLy8gd2hpY2ggaXMgd2hhdCB3ZSB3YW50IGZvciBwYWdlIGFuZCBmb250LWZhY2VcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdAKHBhZ2V8Zm9udC1mYWNlKScsXG4gICAgICAgIGxleGVtZXM6IEFUX0lERU5USUZJRVIsXG4gICAgICAgIGtleXdvcmRzOiAnQHBhZ2UgQGZvbnQtZmFjZSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnQCcsIGVuZDogJ1t7O10nLCAvLyBhdF9ydWxlIGVhdGluZyBmaXJzdCBcIntcIiBpcyBhIGdvb2QgdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQgZG9lc27igJl0IGxldCBpdCB0byBiZSBwYXJzZWQgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgcnVsZSBzZXQgYnV0IGluc3RlYWQgZHJvcHMgcGFyc2VyIGludG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBkZWZhdWx0IG1vZGUgd2hpY2ggaXMgaG93IGl0IHNob3VsZCBiZS5cbiAgICAgICAgaWxsZWdhbDogLzovLCAvLyBicmVhayBvbiBMZXNzIHZhcmlhYmxlcyBAdmFyOiAuLi5cbiAgICAgICAgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAna2V5d29yZCcsXG4gICAgICAgICAgICBiZWdpbjogQVRfUFJPUEVSVFlfUkVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAvXFxzLywgZW5kc1dpdGhQYXJlbnQ6IHRydWUsIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgICBrZXl3b3JkczogQVRfTU9ESUZJRVJTLFxuICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJlZ2luOiAvW2Etei1dKzovLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTpcImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgICAgICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgICAgICAgICAgaGxqcy5DU1NfTlVNQkVSX01PREVcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3NlbGVjdG9yLXRhZycsIGJlZ2luOiBJREVOVF9SRSxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcey8sIGVuZDogL1xcfS8sXG4gICAgICAgIGlsbGVnYWw6IC9cXFMvLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICAgICAgeyBiZWdpbjogLzsvIH0sIC8vIGVtcHR5IDsgcnVsZVxuICAgICAgICAgIFJVTEUsXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3NzO1xuIl0sIm5hbWVzIjpbImNzcyIsImhsanMiLCJGVU5DVElPTl9MSUtFIiwiYmVnaW4iLCJyZXR1cm5CZWdpbiIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwiZW5kIiwiQVBPU19TVFJJTkdfTU9ERSIsIlFVT1RFX1NUUklOR19NT0RFIiwiQ1NTX05VTUJFUl9NT0RFIiwiQVRUUklCVVRFIiwiZXhjbHVkZUVuZCIsInN0YXJ0cyIsImVuZHNXaXRoUGFyZW50IiwiQ19CTE9DS19DT01NRU5UX01PREUiLCJBVF9JREVOVElGSUVSIiwiQVRfTU9ESUZJRVJTIiwiQVRfUFJPUEVSVFlfUkUiLCJJREVOVF9SRSIsIlJVTEUiLCJuYW1lIiwiY2FzZV9pbnNlbnNpdGl2ZSIsImlsbGVnYWwiLCJsZXhlbWVzIiwia2V5d29yZHMiLCJyZWxldmFuY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBLEdBRUEscUJBQXFCLEdBQ3JCLFNBQVNBLElBQUlDLElBQUk7SUFDZixJQUFJQyxnQkFBZ0I7UUFDbEJDLE9BQU87UUFBWUMsYUFBYTtRQUNoQ0MsVUFBVTtZQUNSO2dCQUNFQyxXQUFXO2dCQUNYSCxPQUFPO1lBQ1Q7WUFDQTtnQkFDRUEsT0FBTztnQkFBTUksS0FBSztnQkFDbEJGLFVBQVU7b0JBQ1JKLEtBQUtPLGdCQUFnQjtvQkFDckJQLEtBQUtRLGlCQUFpQjtvQkFDdEJSLEtBQUtTLGVBQWU7aUJBQ3JCO1lBQ0g7U0FDRDtJQUNIO0lBQ0EsSUFBSUMsWUFBWTtRQUNkTCxXQUFXO1FBQ1hILE9BQU87UUFBTUksS0FBSztRQUFLSyxZQUFZO1FBQ25DQyxRQUFRO1lBQ05DLGdCQUFnQjtZQUFNRixZQUFZO1lBQ2xDUCxVQUFVO2dCQUNSSDtnQkFDQUQsS0FBS1MsZUFBZTtnQkFDcEJULEtBQUtRLGlCQUFpQjtnQkFDdEJSLEtBQUtPLGdCQUFnQjtnQkFDckJQLEtBQUtjLG9CQUFvQjtnQkFDekI7b0JBQ0VULFdBQVc7b0JBQVVILE9BQU87Z0JBQzlCO2dCQUNBO29CQUNFRyxXQUFXO29CQUFRSCxPQUFPO2dCQUM1QjthQUNEO1FBQ0g7SUFDRjtJQUNBLElBQUlhLGdCQUFnQixZQUFZLGFBQWE7SUFDN0MsSUFBSUMsZUFBZTtJQUNuQixJQUFJQyxpQkFBaUIscUJBQXFCLHFCQUFxQjtJQUMvRCxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsT0FBTztRQUNUakIsT0FBTztRQUE2REMsYUFBYTtRQUFNRyxLQUFLO1FBQUtPLGdCQUFnQjtRQUNqSFQsVUFBVTtZQUNSTTtTQUNEO0lBQ0g7SUFFQSxPQUFPO1FBQ0xVLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1FBQ1RsQixVQUFVO1lBQ1JKLEtBQUtjLG9CQUFvQjtZQUN6QjtnQkFDRVQsV0FBVztnQkFBZUgsT0FBTztZQUNuQztZQUNBO2dCQUNFRyxXQUFXO2dCQUFrQkgsT0FBTyxRQUFRZ0I7WUFDOUM7WUFDQTtnQkFDRWIsV0FBVztnQkFDWEgsT0FBTztnQkFBTUksS0FBSztnQkFDbEJnQixTQUFTO2dCQUNUbEIsVUFBVTtvQkFDUkosS0FBS08sZ0JBQWdCO29CQUNyQlAsS0FBS1EsaUJBQWlCO2lCQUN2QjtZQUNIO1lBQ0E7Z0JBQ0VILFdBQVc7Z0JBQ1hILE9BQU87WUFDVDtZQUNBLG9FQUFvRTtZQUNwRSxxRUFBcUU7WUFDckUsK0NBQStDO1lBQy9DO2dCQUNFQSxPQUFPO2dCQUNQcUIsU0FBU1I7Z0JBQ1RTLFVBQVU7WUFDWjtZQUNBO2dCQUNFdEIsT0FBTztnQkFBS0ksS0FBSztnQkFDUSw0Q0FBNEM7Z0JBQzVDLDJDQUEyQztnQkFDM0MsOENBQThDO2dCQUN2RWdCLFNBQVM7Z0JBQ1RuQixhQUFhO2dCQUNiQyxVQUFVO29CQUNSO3dCQUNFQyxXQUFXO3dCQUNYSCxPQUFPZTtvQkFDVDtvQkFDQTt3QkFDRWYsT0FBTzt3QkFBTVcsZ0JBQWdCO3dCQUFNRixZQUFZO3dCQUMvQ2MsV0FBVzt3QkFDWEQsVUFBVVI7d0JBQ1ZaLFVBQVU7NEJBQ1I7Z0NBQ0VGLE9BQU87Z0NBQ1BHLFdBQVU7NEJBQ1o7NEJBQ0FMLEtBQUtPLGdCQUFnQjs0QkFDckJQLEtBQUtRLGlCQUFpQjs0QkFDdEJSLEtBQUtTLGVBQWU7eUJBQ3JCO29CQUNIO2lCQUNEO1lBQ0g7WUFDQTtnQkFDRUosV0FBVztnQkFBZ0JILE9BQU9nQjtnQkFDbENPLFdBQVc7WUFDYjtZQUNBO2dCQUNFdkIsT0FBTztnQkFBTUksS0FBSztnQkFDbEJnQixTQUFTO2dCQUNUbEIsVUFBVTtvQkFDUkosS0FBS2Msb0JBQW9CO29CQUN6Qjt3QkFBRVosT0FBTztvQkFBSTtvQkFDYmlCO2lCQUNEO1lBQ0g7U0FDRDtJQUNIO0FBQ0Y7QUFFQU8sT0FBT0MsT0FBTyxHQUFHNUIiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvY3NzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/java.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/java.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = \"[0-9](_*[0-9])*\";\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = \"[0-9a-fA-F](_*[0-9a-fA-F])*\";\nvar NUMERIC = {\n    className: \"number\",\n    variants: [\n        // DecimalFloatingPointLiteral\n        // including ExponentPart\n        {\n            begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // excluding ExponentPart\n        {\n            begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)`\n        },\n        {\n            begin: `(${frac})[fFdD]?\\\\b`\n        },\n        {\n            begin: `\\\\b(${decimalDigits})[fFdD]\\\\b`\n        },\n        // HexadecimalFloatingPointLiteral\n        {\n            begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // DecimalIntegerLiteral\n        {\n            begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\"\n        },\n        // HexIntegerLiteral\n        {\n            begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b`\n        },\n        // OctalIntegerLiteral\n        {\n            begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n        },\n        // BinaryIntegerLiteral\n        {\n            begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\"\n        }\n    ],\n    relevance: 0\n};\n/*\nLanguage: Java\nAuthor: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>\nCategory: common, enterprise\nWebsite: https://www.java.com/\n*/ function java(hljs) {\n    var JAVA_IDENT_RE = \"[\\xc0-ʸa-zA-Z_$][\\xc0-ʸa-zA-Z_$0-9]*\";\n    var GENERIC_IDENT_RE = JAVA_IDENT_RE + \"(<\" + JAVA_IDENT_RE + \"(\\\\s*,\\\\s*\" + JAVA_IDENT_RE + \")*>)?\";\n    var KEYWORDS = \"false synchronized int abstract float private char boolean var static null if const \" + \"for true while long strictfp finally protected import native final void \" + \"enum else break transient catch instanceof byte super volatile case assert short \" + \"package default double public try this switch continue throws protected public private \" + \"module requires exports do\";\n    var ANNOTATION = {\n        className: \"meta\",\n        begin: \"@\" + JAVA_IDENT_RE,\n        contains: [\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    \"self\"\n                ] // allow nested () inside our annotation\n            }\n        ]\n    };\n    const NUMBER = NUMERIC;\n    return {\n        name: \"Java\",\n        aliases: [\n            \"jsp\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /<\\/|#/,\n        contains: [\n            hljs.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n                relevance: 0,\n                contains: [\n                    {\n                        // eat up @'s in emails to prevent them to be recognized as doctags\n                        begin: /\\w+@/,\n                        relevance: 0\n                    },\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            // relevance boost\n            {\n                begin: /import java\\.[a-z]+\\./,\n                keywords: \"import\",\n                relevance: 2\n            },\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            {\n                className: \"class\",\n                beginKeywords: \"class interface enum\",\n                end: /[{;=]/,\n                excludeEnd: true,\n                keywords: \"class interface enum\",\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    {\n                        beginKeywords: \"extends implements\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new throw return else\",\n                relevance: 0\n            },\n            {\n                className: \"class\",\n                begin: \"record\\\\s+\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                returnBegin: true,\n                excludeEnd: true,\n                end: /[{;=]/,\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        beginKeywords: \"record\"\n                    },\n                    {\n                        begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                        returnBegin: true,\n                        relevance: 0,\n                        contains: [\n                            hljs.UNDERSCORE_TITLE_MODE\n                        ]\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                className: \"function\",\n                begin: \"(\" + GENERIC_IDENT_RE + \"\\\\s+)+\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                returnBegin: true,\n                end: /[{;=]/,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                        returnBegin: true,\n                        relevance: 0,\n                        contains: [\n                            hljs.UNDERSCORE_TITLE_MODE\n                        ]\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            ANNOTATION,\n                            hljs.APOS_STRING_MODE,\n                            hljs.QUOTE_STRING_MODE,\n                            NUMBER,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            NUMBER,\n            ANNOTATION\n        ]\n    };\n}\nmodule.exports = java;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/java.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/javascript.js":
/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/javascript.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\nconst TYPES = [\n    \"Intl\",\n    \"DataView\",\n    \"Number\",\n    \"Math\",\n    \"Date\",\n    \"String\",\n    \"RegExp\",\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Error\",\n    \"Symbol\",\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    \"Proxy\",\n    \"Reflect\",\n    \"JSON\",\n    \"Promise\",\n    \"Float64Array\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Float32Array\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"ArrayBuffer\"\n];\nconst ERROR_TYPES = [\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            // nested type?\n            // HTML should not include another raw `<` inside a tag\n            // But a type might: `<Array<Array<number>>`, etc.\n            if (nextChar === \"<\") {\n                response.ignoreMatch();\n                return;\n            }\n            // <something>\n            // This is now either a tag or a type.\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.join(\" \"),\n        literal: LITERALS.join(\" \"),\n        built_in: BUILT_INS.join(\" \")\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \"html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \"css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                className: \"doctag\",\n                begin: \"@[A-Za-z]+\",\n                contains: [\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        TEMPLATE_STRING,\n        NUMBER,\n        hljs.REGEXP_MODE\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    return {\n        name: \"Javascript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            {\n                label: \"use_strict\",\n                className: \"meta\",\n                relevance: 10,\n                begin: /^\\s*['\"]use (strict|asm)['\"]/\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            NUMBER,\n            {\n                begin: concat(/[{,\\n]\\s*/, // we need to look ahead to make sure that we actually have an\n                // attribute coming up so we don't steal a comma from a potential\n                // \"value\" container\n                //\n                // NOTE: this might not work how you think.  We don't actually always\n                // enter this mode and stay.  Instead it might merely match `,\n                // <comments up next>` and then immediately end after the , because it\n                // fails to find any actual attrs. But this still does the job because\n                // it prevents the value contain rule from grabbing this instead and\n                // prevening this rule from firing when we actually DO have keys.\n                lookahead(concat(// we also need to allow for multiple possible comments inbetween\n                // the first key:value pairing\n                /(((\\/\\/.*$)|(\\/\\*(\\*[^/]|[^*])*\\*\\/))\\s*)*/, IDENT_RE$1 + \"\\\\s*:\"))),\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"attr\",\n                        begin: IDENT_RE$1 + lookahead(\"\\\\s*:\"),\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\",\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        className: \"\",\n                        begin: /\\s/,\n                        end: /\\s*/,\n                        skip: true\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                className: \"function\",\n                beginKeywords: \"function\",\n                end: /[{;]/,\n                excludeEnd: true,\n                keywords: KEYWORDS$1,\n                contains: [\n                    \"self\",\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    PARAMS\n                ],\n                illegal: /%/\n            },\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                className: \"function\",\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    })\n                ]\n            },\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                variants: [\n                    {\n                        begin: \"\\\\.\" + IDENT_RE$1\n                    },\n                    {\n                        begin: \"\\\\$\" + IDENT_RE$1\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                className: \"class\",\n                beginKeywords: \"class\",\n                end: /[{;=]/,\n                excludeEnd: true,\n                illegal: /[:\"[\\]]/,\n                contains: [\n                    {\n                        beginKeywords: \"extends\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                begin: /\\b(?=constructor)/,\n                end: /[{;]/,\n                excludeEnd: true,\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    \"self\",\n                    PARAMS\n                ]\n            },\n            {\n                begin: \"(get|set)\\\\s+(?=\" + IDENT_RE$1 + \"\\\\()\",\n                end: /\\{/,\n                keywords: \"get set\",\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    {\n                        begin: /\\(\\)/\n                    },\n                    PARAMS\n                ]\n            },\n            {\n                begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\nmodule.exports = javascript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/json.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/json.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols\n*/ function json(hljs) {\n    const LITERALS = {\n        literal: \"true false null\"\n    };\n    const ALLOWED_COMMENTS = [\n        hljs.C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE\n    ];\n    const TYPES = [\n        hljs.QUOTE_STRING_MODE,\n        hljs.C_NUMBER_MODE\n    ];\n    const VALUE_CONTAINER = {\n        end: \",\",\n        endsWithParent: true,\n        excludeEnd: true,\n        contains: TYPES,\n        keywords: LITERALS\n    };\n    const OBJECT = {\n        begin: /\\{/,\n        end: /\\}/,\n        contains: [\n            {\n                className: \"attr\",\n                begin: /\"/,\n                end: /\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ],\n                illegal: \"\\\\n\"\n            },\n            hljs.inherit(VALUE_CONTAINER, {\n                begin: /:/\n            })\n        ].concat(ALLOWED_COMMENTS),\n        illegal: \"\\\\S\"\n    };\n    const ARRAY = {\n        begin: \"\\\\[\",\n        end: \"\\\\]\",\n        contains: [\n            hljs.inherit(VALUE_CONTAINER)\n        ],\n        illegal: \"\\\\S\"\n    };\n    TYPES.push(OBJECT, ARRAY);\n    ALLOWED_COMMENTS.forEach(function(rule) {\n        TYPES.push(rule);\n    });\n    return {\n        name: \"JSON\",\n        contains: TYPES,\n        keywords: LITERALS,\n        illegal: \"\\\\S\"\n    };\n}\nmodule.exports = json;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Lbm93bGVkZ2VHcmFwaFFTLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2pzb24uanM/ZDY1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IEpTT05cbkRlc2NyaXB0aW9uOiBKU09OIChKYXZhU2NyaXB0IE9iamVjdCBOb3RhdGlvbikgaXMgYSBsaWdodHdlaWdodCBkYXRhLWludGVyY2hhbmdlIGZvcm1hdC5cbkF1dGhvcjogSXZhbiBTYWdhbGFldiA8bWFuaWFjQHNvZnR3YXJlbWFuaWFjcy5vcmc+XG5XZWJzaXRlOiBodHRwOi8vd3d3Lmpzb24ub3JnXG5DYXRlZ29yeTogY29tbW9uLCBwcm90b2NvbHNcbiovXG5cbmZ1bmN0aW9uIGpzb24oaGxqcykge1xuICBjb25zdCBMSVRFUkFMUyA9IHtcbiAgICBsaXRlcmFsOiAndHJ1ZSBmYWxzZSBudWxsJ1xuICB9O1xuICBjb25zdCBBTExPV0VEX0NPTU1FTlRTID0gW1xuICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXG4gIF07XG4gIGNvbnN0IFRZUEVTID0gW1xuICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgaGxqcy5DX05VTUJFUl9NT0RFXG4gIF07XG4gIGNvbnN0IFZBTFVFX0NPTlRBSU5FUiA9IHtcbiAgICBlbmQ6ICcsJyxcbiAgICBlbmRzV2l0aFBhcmVudDogdHJ1ZSxcbiAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgIGNvbnRhaW5zOiBUWVBFUyxcbiAgICBrZXl3b3JkczogTElURVJBTFNcbiAgfTtcbiAgY29uc3QgT0JKRUNUID0ge1xuICAgIGJlZ2luOiAvXFx7LyxcbiAgICBlbmQ6IC9cXH0vLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2F0dHInLFxuICAgICAgICBiZWdpbjogL1wiLyxcbiAgICAgICAgZW5kOiAvXCIvLFxuICAgICAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV0sXG4gICAgICAgIGlsbGVnYWw6ICdcXFxcbidcbiAgICAgIH0sXG4gICAgICBobGpzLmluaGVyaXQoVkFMVUVfQ09OVEFJTkVSLCB7XG4gICAgICAgIGJlZ2luOiAvOi9cbiAgICAgIH0pXG4gICAgXS5jb25jYXQoQUxMT1dFRF9DT01NRU5UUyksXG4gICAgaWxsZWdhbDogJ1xcXFxTJ1xuICB9O1xuICBjb25zdCBBUlJBWSA9IHtcbiAgICBiZWdpbjogJ1xcXFxbJyxcbiAgICBlbmQ6ICdcXFxcXScsXG4gICAgY29udGFpbnM6IFtobGpzLmluaGVyaXQoVkFMVUVfQ09OVEFJTkVSKV0sIC8vIGluaGVyaXQgaXMgYSB3b3JrYXJvdW5kIGZvciBhIGJ1ZyB0aGF0IG1ha2VzIHNoYXJlZCBtb2RlcyB3aXRoIGVuZHNXaXRoUGFyZW50IGNvbXBpbGUgb25seSB0aGUgZW5kaW5nIG9mIG9uZSBvZiB0aGUgcGFyZW50c1xuICAgIGlsbGVnYWw6ICdcXFxcUydcbiAgfTtcbiAgVFlQRVMucHVzaChPQkpFQ1QsIEFSUkFZKTtcbiAgQUxMT1dFRF9DT01NRU5UUy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICBUWVBFUy5wdXNoKHJ1bGUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnSlNPTicsXG4gICAgY29udGFpbnM6IFRZUEVTLFxuICAgIGtleXdvcmRzOiBMSVRFUkFMUyxcbiAgICBpbGxlZ2FsOiAnXFxcXFMnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbjtcbiJdLCJuYW1lcyI6WyJqc29uIiwiaGxqcyIsIkxJVEVSQUxTIiwibGl0ZXJhbCIsIkFMTE9XRURfQ09NTUVOVFMiLCJDX0xJTkVfQ09NTUVOVF9NT0RFIiwiQ19CTE9DS19DT01NRU5UX01PREUiLCJUWVBFUyIsIlFVT1RFX1NUUklOR19NT0RFIiwiQ19OVU1CRVJfTU9ERSIsIlZBTFVFX0NPTlRBSU5FUiIsImVuZCIsImVuZHNXaXRoUGFyZW50IiwiZXhjbHVkZUVuZCIsImNvbnRhaW5zIiwia2V5d29yZHMiLCJPQkpFQ1QiLCJiZWdpbiIsImNsYXNzTmFtZSIsIkJBQ0tTTEFTSF9FU0NBUEUiLCJpbGxlZ2FsIiwiaW5oZXJpdCIsImNvbmNhdCIsIkFSUkFZIiwicHVzaCIsImZvckVhY2giLCJydWxlIiwibmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLEtBQUtDLElBQUk7SUFDaEIsTUFBTUMsV0FBVztRQUNmQyxTQUFTO0lBQ1g7SUFDQSxNQUFNQyxtQkFBbUI7UUFDdkJILEtBQUtJLG1CQUFtQjtRQUN4QkosS0FBS0ssb0JBQW9CO0tBQzFCO0lBQ0QsTUFBTUMsUUFBUTtRQUNaTixLQUFLTyxpQkFBaUI7UUFDdEJQLEtBQUtRLGFBQWE7S0FDbkI7SUFDRCxNQUFNQyxrQkFBa0I7UUFDdEJDLEtBQUs7UUFDTEMsZ0JBQWdCO1FBQ2hCQyxZQUFZO1FBQ1pDLFVBQVVQO1FBQ1ZRLFVBQVViO0lBQ1o7SUFDQSxNQUFNYyxTQUFTO1FBQ2JDLE9BQU87UUFDUE4sS0FBSztRQUNMRyxVQUFVO1lBQ1I7Z0JBQ0VJLFdBQVc7Z0JBQ1hELE9BQU87Z0JBQ1BOLEtBQUs7Z0JBQ0xHLFVBQVU7b0JBQUNiLEtBQUtrQixnQkFBZ0I7aUJBQUM7Z0JBQ2pDQyxTQUFTO1lBQ1g7WUFDQW5CLEtBQUtvQixPQUFPLENBQUNYLGlCQUFpQjtnQkFDNUJPLE9BQU87WUFDVDtTQUNELENBQUNLLE1BQU0sQ0FBQ2xCO1FBQ1RnQixTQUFTO0lBQ1g7SUFDQSxNQUFNRyxRQUFRO1FBQ1pOLE9BQU87UUFDUE4sS0FBSztRQUNMRyxVQUFVO1lBQUNiLEtBQUtvQixPQUFPLENBQUNYO1NBQWlCO1FBQ3pDVSxTQUFTO0lBQ1g7SUFDQWIsTUFBTWlCLElBQUksQ0FBQ1IsUUFBUU87SUFDbkJuQixpQkFBaUJxQixPQUFPLENBQUMsU0FBU0MsSUFBSTtRQUNwQ25CLE1BQU1pQixJQUFJLENBQUNFO0lBQ2I7SUFDQSxPQUFPO1FBQ0xDLE1BQU07UUFDTmIsVUFBVVA7UUFDVlEsVUFBVWI7UUFDVmtCLFNBQVM7SUFDWDtBQUNGO0FBRUFRLE9BQU9DLE9BQU8sR0FBRzdCIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2pzb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/markdown.js":
/*!*************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/markdown.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/ function markdown(hljs) {\n    const INLINE_HTML = {\n        begin: /<\\/?[A-Za-z_]/,\n        end: \">\",\n        subLanguage: \"xml\",\n        relevance: 0\n    };\n    const HORIZONTAL_RULE = {\n        begin: \"^[-\\\\*]{3,}\",\n        end: \"$\"\n    };\n    const CODE = {\n        className: \"code\",\n        variants: [\n            // TODO: fix to allow these to work with sublanguage also\n            {\n                begin: \"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\"\n            },\n            {\n                begin: \"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"\n            },\n            // needed to allow markdown as a sublanguage to work\n            {\n                begin: \"```\",\n                end: \"```+[ ]*$\"\n            },\n            {\n                begin: \"~~~\",\n                end: \"~~~+[ ]*$\"\n            },\n            {\n                begin: \"`.+?`\"\n            },\n            {\n                begin: \"(?=^( {4}|\\\\t))\",\n                // use contains to gobble up multiple lines to allow the block to be whatever size\n                // but only have a single open/close tag vs one per line\n                contains: [\n                    {\n                        begin: \"^( {4}|\\\\t)\",\n                        end: \"(\\\\n)$\"\n                    }\n                ],\n                relevance: 0\n            }\n        ]\n    };\n    const LIST = {\n        className: \"bullet\",\n        begin: \"^[ \t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)\",\n        end: \"\\\\s+\",\n        excludeEnd: true\n    };\n    const LINK_REFERENCE = {\n        begin: /^\\[[^\\n]+\\]:/,\n        returnBegin: true,\n        contains: [\n            {\n                className: \"symbol\",\n                begin: /\\[/,\n                end: /\\]/,\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"link\",\n                begin: /:\\s*/,\n                end: /$/,\n                excludeBegin: true\n            }\n        ]\n    };\n    const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n    const LINK = {\n        variants: [\n            // too much like nested array access in so many languages\n            // to have any real relevance\n            {\n                begin: /\\[.+?\\]\\[.*?\\]/,\n                relevance: 0\n            },\n            // popular internet URLs\n            {\n                begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n                relevance: 2\n            },\n            {\n                begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n                relevance: 2\n            },\n            // relative urls\n            {\n                begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n                relevance: 1\n            },\n            // whatever else, lower relevance (might not be a link at all)\n            {\n                begin: /\\[.+?\\]\\(.*?\\)/,\n                relevance: 0\n            }\n        ],\n        returnBegin: true,\n        contains: [\n            {\n                className: \"string\",\n                relevance: 0,\n                begin: \"\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                returnEnd: true\n            },\n            {\n                className: \"link\",\n                relevance: 0,\n                begin: \"\\\\]\\\\(\",\n                end: \"\\\\)\",\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"symbol\",\n                relevance: 0,\n                begin: \"\\\\]\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                excludeEnd: true\n            }\n        ]\n    };\n    const BOLD = {\n        className: \"strong\",\n        contains: [],\n        variants: [\n            {\n                begin: /_{2}/,\n                end: /_{2}/\n            },\n            {\n                begin: /\\*{2}/,\n                end: /\\*{2}/\n            }\n        ]\n    };\n    const ITALIC = {\n        className: \"emphasis\",\n        contains: [],\n        variants: [\n            {\n                begin: /\\*(?!\\*)/,\n                end: /\\*/\n            },\n            {\n                begin: /_(?!_)/,\n                end: /_/,\n                relevance: 0\n            }\n        ]\n    };\n    BOLD.contains.push(ITALIC);\n    ITALIC.contains.push(BOLD);\n    let CONTAINABLE = [\n        INLINE_HTML,\n        LINK\n    ];\n    BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n    ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n    CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n    const HEADER = {\n        className: \"section\",\n        variants: [\n            {\n                begin: \"^#{1,6}\",\n                end: \"$\",\n                contains: CONTAINABLE\n            },\n            {\n                begin: \"(?=^.+?\\\\n[=-]{2,}$)\",\n                contains: [\n                    {\n                        begin: \"^[=-]*$\"\n                    },\n                    {\n                        begin: \"^\",\n                        end: \"\\\\n\",\n                        contains: CONTAINABLE\n                    }\n                ]\n            }\n        ]\n    };\n    const BLOCKQUOTE = {\n        className: \"quote\",\n        begin: \"^>\\\\s+\",\n        contains: CONTAINABLE,\n        end: \"$\"\n    };\n    return {\n        name: \"Markdown\",\n        aliases: [\n            \"md\",\n            \"mkdown\",\n            \"mkd\"\n        ],\n        contains: [\n            HEADER,\n            INLINE_HTML,\n            LIST,\n            BOLD,\n            ITALIC,\n            BLOCKQUOTE,\n            CODE,\n            HORIZONTAL_RULE,\n            LINK,\n            LINK_REFERENCE\n        ]\n    };\n}\nmodule.exports = markdown;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/python.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/python.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/ function python(hljs) {\n    const RESERVED_WORDS = [\n        \"and\",\n        \"as\",\n        \"assert\",\n        \"async\",\n        \"await\",\n        \"break\",\n        \"class\",\n        \"continue\",\n        \"def\",\n        \"del\",\n        \"elif\",\n        \"else\",\n        \"except\",\n        \"finally\",\n        \"for\",\n        \"\",\n        \"from\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"in\",\n        \"is\",\n        \"lambda\",\n        \"nonlocal|10\",\n        \"not\",\n        \"or\",\n        \"pass\",\n        \"raise\",\n        \"return\",\n        \"try\",\n        \"while\",\n        \"with\",\n        \"yield\"\n    ];\n    const BUILT_INS = [\n        \"__import__\",\n        \"abs\",\n        \"all\",\n        \"any\",\n        \"ascii\",\n        \"bin\",\n        \"bool\",\n        \"breakpoint\",\n        \"bytearray\",\n        \"bytes\",\n        \"callable\",\n        \"chr\",\n        \"classmethod\",\n        \"compile\",\n        \"complex\",\n        \"delattr\",\n        \"dict\",\n        \"dir\",\n        \"divmod\",\n        \"enumerate\",\n        \"eval\",\n        \"exec\",\n        \"filter\",\n        \"float\",\n        \"format\",\n        \"frozenset\",\n        \"getattr\",\n        \"globals\",\n        \"hasattr\",\n        \"hash\",\n        \"help\",\n        \"hex\",\n        \"id\",\n        \"input\",\n        \"int\",\n        \"isinstance\",\n        \"issubclass\",\n        \"iter\",\n        \"len\",\n        \"list\",\n        \"locals\",\n        \"map\",\n        \"max\",\n        \"memoryview\",\n        \"min\",\n        \"next\",\n        \"object\",\n        \"oct\",\n        \"open\",\n        \"ord\",\n        \"pow\",\n        \"print\",\n        \"property\",\n        \"range\",\n        \"repr\",\n        \"reversed\",\n        \"round\",\n        \"set\",\n        \"setattr\",\n        \"slice\",\n        \"sorted\",\n        \"staticmethod\",\n        \"str\",\n        \"sum\",\n        \"super\",\n        \"tuple\",\n        \"type\",\n        \"vars\",\n        \"zip\"\n    ];\n    const LITERALS = [\n        \"__debug__\",\n        \"Ellipsis\",\n        \"False\",\n        \"None\",\n        \"NotImplemented\",\n        \"True\"\n    ];\n    const KEYWORDS = {\n        keyword: RESERVED_WORDS.join(\" \"),\n        built_in: BUILT_INS.join(\" \"),\n        literal: LITERALS.join(\" \")\n    };\n    const PROMPT = {\n        className: \"meta\",\n        begin: /^(>>>|\\.\\.\\.) /\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS,\n        illegal: /#/\n    };\n    const LITERAL_BRACKET = {\n        begin: /\\{\\{/,\n        relevance: 0\n    };\n    const STRING = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ],\n        variants: [\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([uU]|[rR])'/,\n                end: /'/,\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[rR])\"/,\n                end: /\"/,\n                relevance: 10\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])'/,\n                end: /'/\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n                end: /\"/\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'/,\n                end: /'/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n                end: /\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n    const digitpart = \"[0-9](_?[0-9])*\";\n    const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // exponentfloat, pointfloat\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n            // optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            // Note: no leading \\b because floats can start with a decimal point\n            // and we don't want to mishandle e.g. `fn(.5)`,\n            // no trailing \\b for pointfloat because it can end with a decimal point\n            // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n            // because both MUST contain a decimal point and so cannot be confused with\n            // the interior part of an identifier\n            {\n                begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\n            },\n            {\n                begin: `(${pointfloat})[jJ]?`\n            },\n            // decinteger, bininteger, octinteger, hexinteger\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n            // optionally \"long\" in Python 2\n            // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n            // decinteger is optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: \"\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB](_?[01])+[lL]?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO](_?[0-7])+[lL]?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b\"\n            },\n            // imagnumber (digitpart-based)\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: `\\\\b(${digitpart})[jJ]\\\\b`\n            }\n        ]\n    };\n    const PARAMS = {\n        className: \"params\",\n        variants: [\n            // Exclude params at functions without params\n            {\n                begin: /\\(\\s*\\)/,\n                skip: true,\n                className: null\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                excludeBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    \"self\",\n                    PROMPT,\n                    NUMBER,\n                    STRING,\n                    hljs.HASH_COMMENT_MODE\n                ]\n            }\n        ]\n    };\n    SUBST.contains = [\n        STRING,\n        NUMBER,\n        PROMPT\n    ];\n    return {\n        name: \"Python\",\n        aliases: [\n            \"py\",\n            \"gyp\",\n            \"ipython\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /(<\\/|->|\\?)|=>/,\n        contains: [\n            PROMPT,\n            NUMBER,\n            // eat \"if\" prior to string so that it won't accidentally be\n            // labeled as an f-string as in:\n            {\n                begin: /\\bself\\b/\n            },\n            {\n                beginKeywords: \"if\",\n                relevance: 0\n            },\n            STRING,\n            hljs.HASH_COMMENT_MODE,\n            {\n                variants: [\n                    {\n                        className: \"function\",\n                        beginKeywords: \"def\"\n                    },\n                    {\n                        className: \"class\",\n                        beginKeywords: \"class\"\n                    }\n                ],\n                end: /:/,\n                illegal: /[${=;\\n,]/,\n                contains: [\n                    hljs.UNDERSCORE_TITLE_MODE,\n                    PARAMS,\n                    {\n                        begin: /->/,\n                        endsWithParent: true,\n                        keywords: \"None\"\n                    }\n                ]\n            },\n            {\n                className: \"meta\",\n                begin: /^[\\t ]*@/,\n                end: /(?=#)|$/,\n                contains: [\n                    NUMBER,\n                    PARAMS,\n                    STRING\n                ]\n            },\n            {\n                begin: /\\b(print|exec)\\(/ // don’t highlight keywords-turned-functions in Python 3\n            }\n        ]\n    };\n}\nmodule.exports = python;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/python.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/sql.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/sql.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */ function either(...args) {\n    const joined = \"(\" + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/*\n Language: SQL\n Website: https://en.wikipedia.org/wiki/SQL\n Category: common, database\n */ function sql(hljs) {\n    const COMMENT_MODE = hljs.COMMENT(\"--\", \"$\");\n    const STRING = {\n        className: \"string\",\n        variants: [\n            {\n                begin: /'/,\n                end: /'/,\n                contains: [\n                    {\n                        begin: /''/\n                    }\n                ]\n            }\n        ]\n    };\n    const QUOTED_IDENTIFIER = {\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            {\n                begin: /\"\"/\n            }\n        ]\n    };\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.\n        // \"null\",\n        \"unknown\"\n    ];\n    const MULTI_WORD_TYPES = [\n        \"double precision\",\n        \"large object\",\n        \"with timezone\",\n        \"without timezone\"\n    ];\n    const TYPES = [\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"char\",\n        \"character\",\n        \"clob\",\n        \"date\",\n        \"dec\",\n        \"decfloat\",\n        \"decimal\",\n        \"float\",\n        \"int\",\n        \"integer\",\n        \"interval\",\n        \"nchar\",\n        \"nclob\",\n        \"national\",\n        \"numeric\",\n        \"real\",\n        \"row\",\n        \"smallint\",\n        \"time\",\n        \"timestamp\",\n        \"varchar\",\n        \"varying\",\n        \"varbinary\"\n    ];\n    const NON_RESERVED_WORDS = [\n        \"add\",\n        \"asc\",\n        \"collation\",\n        \"desc\",\n        \"final\",\n        \"first\",\n        \"last\",\n        \"view\"\n    ];\n    // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word\n    const RESERVED_WORDS = [\n        \"abs\",\n        \"acos\",\n        \"all\",\n        \"allocate\",\n        \"alter\",\n        \"and\",\n        \"any\",\n        \"are\",\n        \"array\",\n        \"array_agg\",\n        \"array_max_cardinality\",\n        \"as\",\n        \"asensitive\",\n        \"asin\",\n        \"asymmetric\",\n        \"at\",\n        \"atan\",\n        \"atomic\",\n        \"authorization\",\n        \"avg\",\n        \"begin\",\n        \"begin_frame\",\n        \"begin_partition\",\n        \"between\",\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"both\",\n        \"by\",\n        \"call\",\n        \"called\",\n        \"cardinality\",\n        \"cascaded\",\n        \"case\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"char\",\n        \"char_length\",\n        \"character\",\n        \"character_length\",\n        \"check\",\n        \"classifier\",\n        \"clob\",\n        \"close\",\n        \"coalesce\",\n        \"collate\",\n        \"collect\",\n        \"column\",\n        \"commit\",\n        \"condition\",\n        \"connect\",\n        \"constraint\",\n        \"contains\",\n        \"convert\",\n        \"copy\",\n        \"corr\",\n        \"corresponding\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"create\",\n        \"cross\",\n        \"cube\",\n        \"cume_dist\",\n        \"current\",\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_row\",\n        \"current_schema\",\n        \"current_time\",\n        \"current_timestamp\",\n        \"current_path\",\n        \"current_role\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"cursor\",\n        \"cycle\",\n        \"date\",\n        \"day\",\n        \"deallocate\",\n        \"dec\",\n        \"decimal\",\n        \"decfloat\",\n        \"declare\",\n        \"default\",\n        \"define\",\n        \"delete\",\n        \"dense_rank\",\n        \"deref\",\n        \"describe\",\n        \"deterministic\",\n        \"disconnect\",\n        \"distinct\",\n        \"double\",\n        \"drop\",\n        \"dynamic\",\n        \"each\",\n        \"element\",\n        \"else\",\n        \"empty\",\n        \"end\",\n        \"end_frame\",\n        \"end_partition\",\n        \"end-exec\",\n        \"equals\",\n        \"escape\",\n        \"every\",\n        \"except\",\n        \"exec\",\n        \"execute\",\n        \"exists\",\n        \"exp\",\n        \"external\",\n        \"extract\",\n        \"false\",\n        \"fetch\",\n        \"filter\",\n        \"first_value\",\n        \"float\",\n        \"floor\",\n        \"for\",\n        \"foreign\",\n        \"frame_row\",\n        \"free\",\n        \"from\",\n        \"full\",\n        \"function\",\n        \"fusion\",\n        \"get\",\n        \"global\",\n        \"grant\",\n        \"group\",\n        \"grouping\",\n        \"groups\",\n        \"having\",\n        \"hold\",\n        \"hour\",\n        \"identity\",\n        \"in\",\n        \"indicator\",\n        \"initial\",\n        \"inner\",\n        \"inout\",\n        \"insensitive\",\n        \"insert\",\n        \"int\",\n        \"integer\",\n        \"intersect\",\n        \"intersection\",\n        \"interval\",\n        \"into\",\n        \"is\",\n        \"join\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"language\",\n        \"large\",\n        \"last_value\",\n        \"lateral\",\n        \"lead\",\n        \"leading\",\n        \"left\",\n        \"like\",\n        \"like_regex\",\n        \"listagg\",\n        \"ln\",\n        \"local\",\n        \"localtime\",\n        \"localtimestamp\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"match\",\n        \"match_number\",\n        \"match_recognize\",\n        \"matches\",\n        \"max\",\n        \"member\",\n        \"merge\",\n        \"method\",\n        \"min\",\n        \"minute\",\n        \"mod\",\n        \"modifies\",\n        \"module\",\n        \"month\",\n        \"multiset\",\n        \"national\",\n        \"natural\",\n        \"nchar\",\n        \"nclob\",\n        \"new\",\n        \"no\",\n        \"none\",\n        \"normalize\",\n        \"not\",\n        \"nth_value\",\n        \"ntile\",\n        \"null\",\n        \"nullif\",\n        \"numeric\",\n        \"octet_length\",\n        \"occurrences_regex\",\n        \"of\",\n        \"offset\",\n        \"old\",\n        \"omit\",\n        \"on\",\n        \"one\",\n        \"only\",\n        \"open\",\n        \"or\",\n        \"order\",\n        \"out\",\n        \"outer\",\n        \"over\",\n        \"overlaps\",\n        \"overlay\",\n        \"parameter\",\n        \"partition\",\n        \"pattern\",\n        \"per\",\n        \"percent\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"period\",\n        \"portion\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"precedes\",\n        \"precision\",\n        \"prepare\",\n        \"primary\",\n        \"procedure\",\n        \"ptf\",\n        \"range\",\n        \"rank\",\n        \"reads\",\n        \"real\",\n        \"recursive\",\n        \"ref\",\n        \"references\",\n        \"referencing\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"release\",\n        \"result\",\n        \"return\",\n        \"returns\",\n        \"revoke\",\n        \"right\",\n        \"rollback\",\n        \"rollup\",\n        \"row\",\n        \"row_number\",\n        \"rows\",\n        \"running\",\n        \"savepoint\",\n        \"scope\",\n        \"scroll\",\n        \"search\",\n        \"second\",\n        \"seek\",\n        \"select\",\n        \"sensitive\",\n        \"session_user\",\n        \"set\",\n        \"show\",\n        \"similar\",\n        \"sin\",\n        \"sinh\",\n        \"skip\",\n        \"smallint\",\n        \"some\",\n        \"specific\",\n        \"specifictype\",\n        \"sql\",\n        \"sqlexception\",\n        \"sqlstate\",\n        \"sqlwarning\",\n        \"sqrt\",\n        \"start\",\n        \"static\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"submultiset\",\n        \"subset\",\n        \"substring\",\n        \"substring_regex\",\n        \"succeeds\",\n        \"sum\",\n        \"symmetric\",\n        \"system\",\n        \"system_time\",\n        \"system_user\",\n        \"table\",\n        \"tablesample\",\n        \"tan\",\n        \"tanh\",\n        \"then\",\n        \"time\",\n        \"timestamp\",\n        \"timezone_hour\",\n        \"timezone_minute\",\n        \"to\",\n        \"trailing\",\n        \"translate\",\n        \"translate_regex\",\n        \"translation\",\n        \"treat\",\n        \"trigger\",\n        \"trim\",\n        \"trim_array\",\n        \"true\",\n        \"truncate\",\n        \"uescape\",\n        \"union\",\n        \"unique\",\n        \"unknown\",\n        \"unnest\",\n        \"update   \",\n        \"upper\",\n        \"user\",\n        \"using\",\n        \"value\",\n        \"values\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"varbinary\",\n        \"varchar\",\n        \"varying\",\n        \"versioning\",\n        \"when\",\n        \"whenever\",\n        \"where\",\n        \"width_bucket\",\n        \"window\",\n        \"with\",\n        \"within\",\n        \"without\",\n        \"year\"\n    ];\n    // these are reserved words we have identified to be functions\n    // and should only be highlighted in a dispatch-like context\n    // ie, array_agg(...), etc.\n    const RESERVED_FUNCTIONS = [\n        \"abs\",\n        \"acos\",\n        \"array_agg\",\n        \"asin\",\n        \"atan\",\n        \"avg\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"coalesce\",\n        \"corr\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"cume_dist\",\n        \"dense_rank\",\n        \"deref\",\n        \"element\",\n        \"exp\",\n        \"extract\",\n        \"first_value\",\n        \"floor\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"last_value\",\n        \"lead\",\n        \"listagg\",\n        \"ln\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"max\",\n        \"min\",\n        \"mod\",\n        \"nth_value\",\n        \"ntile\",\n        \"nullif\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"rank\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"row_number\",\n        \"sin\",\n        \"sinh\",\n        \"sqrt\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"substring\",\n        \"substring_regex\",\n        \"sum\",\n        \"tan\",\n        \"tanh\",\n        \"translate\",\n        \"translate_regex\",\n        \"treat\",\n        \"trim\",\n        \"trim_array\",\n        \"unnest\",\n        \"upper\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"width_bucket\"\n    ];\n    // these functions can\n    const POSSIBLE_WITHOUT_PARENS = [\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_schema\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"session_user\",\n        \"system_time\",\n        \"system_user\",\n        \"current_time\",\n        \"localtime\",\n        \"current_timestamp\",\n        \"localtimestamp\"\n    ];\n    // those exist to boost relevance making these very\n    // \"SQL like\" keyword combos worth +1 extra relevance\n    const COMBOS = [\n        \"create table\",\n        \"insert into\",\n        \"primary key\",\n        \"foreign key\",\n        \"not null\",\n        \"alter table\",\n        \"add constraint\",\n        \"grouping sets\",\n        \"on overflow\",\n        \"character set\",\n        \"respect nulls\",\n        \"ignore nulls\",\n        \"nulls first\",\n        \"nulls last\",\n        \"depth first\",\n        \"breadth first\"\n    ];\n    const FUNCTIONS = RESERVED_FUNCTIONS;\n    const KEYWORDS = [\n        ...RESERVED_WORDS,\n        ...NON_RESERVED_WORDS\n    ].filter((keyword)=>{\n        return !RESERVED_FUNCTIONS.includes(keyword);\n    });\n    const VARIABLE = {\n        className: \"variable\",\n        begin: /@[a-z0-9]+/\n    };\n    const OPERATOR = {\n        className: \"operator\",\n        begin: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,\n        relevance: 0\n    };\n    const FUNCTION_CALL = {\n        begin: concat(/\\b/, either(...FUNCTIONS), /\\s*\\(/),\n        keywords: {\n            built_in: FUNCTIONS.join(\" \")\n        }\n    };\n    // keywords with less than 3 letters are reduced in relevancy\n    function reduceRelevancy(list, { exceptions, when } = {}) {\n        const qualifyFn = when;\n        exceptions = exceptions || [];\n        return list.map((item)=>{\n            if (item.match(/\\|\\d+$/) || exceptions.includes(item)) {\n                return item;\n            } else if (qualifyFn(item)) {\n                return `${item}|0`;\n            } else {\n                return item;\n            }\n        });\n    }\n    return {\n        name: \"SQL\",\n        case_insensitive: true,\n        // does not include {} or HTML tags `</`\n        illegal: /[{}]|<\\//,\n        keywords: {\n            $pattern: /\\b[\\w\\.]+/,\n            keyword: reduceRelevancy(KEYWORDS, {\n                when: (x)=>x.length < 3\n            }).join(\" \"),\n            literal: LITERALS.join(\" \"),\n            type: TYPES.join(\" \"),\n            built_in: POSSIBLE_WITHOUT_PARENS.join(\" \")\n        },\n        contains: [\n            {\n                begin: either(...COMBOS),\n                keywords: {\n                    $pattern: /[\\w\\.]+/,\n                    keyword: KEYWORDS.concat(COMBOS).join(\" \"),\n                    literal: LITERALS.join(\" \"),\n                    type: TYPES.join(\" \")\n                }\n            },\n            {\n                className: \"type\",\n                begin: either(...MULTI_WORD_TYPES)\n            },\n            FUNCTION_CALL,\n            VARIABLE,\n            STRING,\n            QUOTED_IDENTIFIER,\n            hljs.C_NUMBER_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            COMMENT_MODE,\n            OPERATOR\n        ]\n    };\n}\nmodule.exports = sql;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/sql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/typescript.js":
/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/typescript.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\nconst TYPES = [\n    \"Intl\",\n    \"DataView\",\n    \"Number\",\n    \"Math\",\n    \"Date\",\n    \"String\",\n    \"RegExp\",\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Error\",\n    \"Symbol\",\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    \"Proxy\",\n    \"Reflect\",\n    \"JSON\",\n    \"Promise\",\n    \"Float64Array\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Float32Array\",\n    \"Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"ArrayBuffer\"\n];\nconst ERROR_TYPES = [\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            // nested type?\n            // HTML should not include another raw `<` inside a tag\n            // But a type might: `<Array<Array<number>>`, etc.\n            if (nextChar === \"<\") {\n                response.ignoreMatch();\n                return;\n            }\n            // <something>\n            // This is now either a tag or a type.\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.join(\" \"),\n        literal: LITERALS.join(\" \"),\n        built_in: BUILT_INS.join(\" \")\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \"html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \"css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                className: \"doctag\",\n                begin: \"@[A-Za-z]+\",\n                contains: [\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        TEMPLATE_STRING,\n        NUMBER,\n        hljs.REGEXP_MODE\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    return {\n        name: \"Javascript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            {\n                label: \"use_strict\",\n                className: \"meta\",\n                relevance: 10,\n                begin: /^\\s*['\"]use (strict|asm)['\"]/\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            NUMBER,\n            {\n                begin: concat(/[{,\\n]\\s*/, // we need to look ahead to make sure that we actually have an\n                // attribute coming up so we don't steal a comma from a potential\n                // \"value\" container\n                //\n                // NOTE: this might not work how you think.  We don't actually always\n                // enter this mode and stay.  Instead it might merely match `,\n                // <comments up next>` and then immediately end after the , because it\n                // fails to find any actual attrs. But this still does the job because\n                // it prevents the value contain rule from grabbing this instead and\n                // prevening this rule from firing when we actually DO have keys.\n                lookahead(concat(// we also need to allow for multiple possible comments inbetween\n                // the first key:value pairing\n                /(((\\/\\/.*$)|(\\/\\*(\\*[^/]|[^*])*\\*\\/))\\s*)*/, IDENT_RE$1 + \"\\\\s*:\"))),\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"attr\",\n                        begin: IDENT_RE$1 + lookahead(\"\\\\s*:\"),\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\",\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        className: \"\",\n                        begin: /\\s/,\n                        end: /\\s*/,\n                        skip: true\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                className: \"function\",\n                beginKeywords: \"function\",\n                end: /[{;]/,\n                excludeEnd: true,\n                keywords: KEYWORDS$1,\n                contains: [\n                    \"self\",\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    PARAMS\n                ],\n                illegal: /%/\n            },\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                className: \"function\",\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    })\n                ]\n            },\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                variants: [\n                    {\n                        begin: \"\\\\.\" + IDENT_RE$1\n                    },\n                    {\n                        begin: \"\\\\$\" + IDENT_RE$1\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                className: \"class\",\n                beginKeywords: \"class\",\n                end: /[{;=]/,\n                excludeEnd: true,\n                illegal: /[:\"[\\]]/,\n                contains: [\n                    {\n                        beginKeywords: \"extends\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                begin: /\\b(?=constructor)/,\n                end: /[{;]/,\n                excludeEnd: true,\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    \"self\",\n                    PARAMS\n                ]\n            },\n            {\n                begin: \"(get|set)\\\\s+(?=\" + IDENT_RE$1 + \"\\\\()\",\n                end: /\\{/,\n                keywords: \"get set\",\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1\n                    }),\n                    {\n                        begin: /\\(\\)/\n                    },\n                    PARAMS\n                ]\n            },\n            {\n                begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n/*\nLanguage: TypeScript\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\nContributors: Ike Ku <dempfi@yahoo.com>\nDescription: TypeScript is a strict superset of JavaScript\nWebsite: https://www.typescriptlang.org\nCategory: common, scripting\n*/ /** @type LanguageFn */ function typescript(hljs) {\n    const IDENT_RE$1 = IDENT_RE;\n    const NAMESPACE = {\n        beginKeywords: \"namespace\",\n        end: /\\{/,\n        excludeEnd: true\n    };\n    const INTERFACE = {\n        beginKeywords: \"interface\",\n        end: /\\{/,\n        excludeEnd: true,\n        keywords: \"interface extends\"\n    };\n    const USE_STRICT = {\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use strict['\"]/\n    };\n    const TYPES = [\n        \"any\",\n        \"void\",\n        \"number\",\n        \"boolean\",\n        \"string\",\n        \"object\",\n        \"never\",\n        \"enum\"\n    ];\n    const TS_SPECIFIC_KEYWORDS = [\n        \"type\",\n        \"namespace\",\n        \"typedef\",\n        \"interface\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"implements\",\n        \"declare\",\n        \"abstract\",\n        \"readonly\"\n    ];\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS).join(\" \"),\n        literal: LITERALS.join(\" \"),\n        built_in: BUILT_INS.concat(TYPES).join(\" \")\n    };\n    const DECORATOR = {\n        className: \"meta\",\n        begin: \"@\" + IDENT_RE$1\n    };\n    const swapMode = (mode, label, replacement)=>{\n        const indx = mode.contains.findIndex((m)=>m.label === label);\n        if (indx === -1) {\n            throw new Error(\"can not find mode to replace\");\n        }\n        mode.contains.splice(indx, 1, replacement);\n    };\n    const tsLanguage = javascript(hljs);\n    // this should update anywhere keywords is used since\n    // it will be the same actual JS object\n    Object.assign(tsLanguage.keywords, KEYWORDS$1);\n    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\n    tsLanguage.contains = tsLanguage.contains.concat([\n        DECORATOR,\n        NAMESPACE,\n        INTERFACE\n    ]);\n    // TS gets a simpler shebang rule than JS\n    swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\n    // JS use strict rule purposely excludes `asm` which makes no sense\n    swapMode(tsLanguage, \"use_strict\", USE_STRICT);\n    const functionDeclaration = tsLanguage.contains.find((m)=>m.className === \"function\");\n    functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\n    Object.assign(tsLanguage, {\n        name: \"TypeScript\",\n        aliases: [\n            \"ts\"\n        ]\n    });\n    return tsLanguage;\n}\nmodule.exports = typescript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/xml.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/xml.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function optional(re) {\n    return concat(\"(\", re, \")?\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */ function either(...args) {\n    const joined = \"(\" + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common\nAudit: 2020\n*/ /** @type LanguageFn */ function xml(hljs) {\n    // Element names can contain letters, digits, hyphens, underscores, and periods\n    const TAG_NAME_RE = concat(/[A-Z_]/, optional(/[A-Z0-9_.-]+:/), /[A-Z0-9_.-]*/);\n    const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;\n    const XML_ENTITIES = {\n        className: \"symbol\",\n        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n    };\n    const XML_META_KEYWORDS = {\n        begin: /\\s/,\n        contains: [\n            {\n                className: \"meta-keyword\",\n                begin: /#?[a-z_][a-z1-9_-]+/,\n                illegal: /\\n/\n            }\n        ]\n    };\n    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n        begin: /\\(/,\n        end: /\\)/\n    });\n    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: \"meta-string\"\n    });\n    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: \"meta-string\"\n    });\n    const TAG_INTERNALS = {\n        endsWithParent: true,\n        illegal: /</,\n        relevance: 0,\n        contains: [\n            {\n                className: \"attr\",\n                begin: XML_IDENT_RE,\n                relevance: 0\n            },\n            {\n                begin: /=\\s*/,\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"string\",\n                        endsParent: true,\n                        variants: [\n                            {\n                                begin: /\"/,\n                                end: /\"/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /'/,\n                                end: /'/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /[^\\s\"'=<>`]+/\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        name: \"HTML, XML\",\n        aliases: [\n            \"html\",\n            \"xhtml\",\n            \"rss\",\n            \"atom\",\n            \"xjb\",\n            \"xsd\",\n            \"xsl\",\n            \"plist\",\n            \"wsf\",\n            \"svg\"\n        ],\n        case_insensitive: true,\n        contains: [\n            {\n                className: \"meta\",\n                begin: /<![a-z]/,\n                end: />/,\n                relevance: 10,\n                contains: [\n                    XML_META_KEYWORDS,\n                    QUOTE_META_STRING_MODE,\n                    APOS_META_STRING_MODE,\n                    XML_META_PAR_KEYWORDS,\n                    {\n                        begin: /\\[/,\n                        end: /\\]/,\n                        contains: [\n                            {\n                                className: \"meta\",\n                                begin: /<![a-z]/,\n                                end: />/,\n                                contains: [\n                                    XML_META_KEYWORDS,\n                                    XML_META_PAR_KEYWORDS,\n                                    QUOTE_META_STRING_MODE,\n                                    APOS_META_STRING_MODE\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            hljs.COMMENT(/<!--/, /-->/, {\n                relevance: 10\n            }),\n            {\n                begin: /<!\\[CDATA\\[/,\n                end: /\\]\\]>/,\n                relevance: 10\n            },\n            XML_ENTITIES,\n            {\n                className: \"meta\",\n                begin: /<\\?xml/,\n                end: /\\?>/,\n                relevance: 10\n            },\n            {\n                className: \"tag\",\n                /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending braket. The '$' is needed for the lexeme to be recognized\n        by hljs.subMode() that tests lexemes outside the stream.\n        */ begin: /<style(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"style\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/style>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"css\",\n                        \"xml\"\n                    ]\n                }\n            },\n            {\n                className: \"tag\",\n                // See the comment in the <style tag about the lookahead pattern\n                begin: /<script(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"script\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/script>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"javascript\",\n                        \"handlebars\",\n                        \"xml\"\n                    ]\n                }\n            },\n            // we need this for now for jSX\n            {\n                className: \"tag\",\n                begin: /<>|<\\/>/\n            },\n            // open tag\n            {\n                className: \"tag\",\n                begin: concat(/</, lookahead(concat(TAG_NAME_RE, // <tag/>\n                // <tag>\n                // <tag ...\n                either(/\\/>/, />/, /\\s/)))),\n                end: /\\/?>/,\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0,\n                        starts: TAG_INTERNALS\n                    }\n                ]\n            },\n            // close tag\n            {\n                className: \"tag\",\n                begin: concat(/<\\//, lookahead(concat(TAG_NAME_RE, />/))),\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0\n                    },\n                    {\n                        begin: />/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    };\n}\nmodule.exports = xml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/xml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/lib/languages/yaml.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/yaml.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/ function yaml(hljs) {\n    var LITERALS = \"true false yes no null\";\n    // YAML spec allows non-reserved URI characters in tags.\n    var URI_CHARACTERS = \"[\\\\w#;/?:@&=+$,.~*'()[\\\\]]+\";\n    // Define keys as starting with a word character\n    // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n    // ...and ending with a colon followed immediately by a space, tab or newline.\n    // The YAML spec allows for much more than this, but this covers most use-cases.\n    var KEY = {\n        className: \"attr\",\n        variants: [\n            {\n                begin: \"\\\\w[\\\\w :\\\\/.-]*:(?=[ \t]|$)\"\n            },\n            {\n                begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \t]|$)'\n            },\n            {\n                begin: \"'\\\\w[\\\\w :\\\\/.-]*':(?=[ \t]|$)\"\n            } // single quoted keys\n        ]\n    };\n    var TEMPLATE_VARIABLES = {\n        className: \"template-variable\",\n        variants: [\n            {\n                begin: /\\{\\{/,\n                end: /\\}\\}/\n            },\n            {\n                begin: /%\\{/,\n                end: /\\}/\n            } // Ruby i18n\n        ]\n    };\n    var STRING = {\n        className: \"string\",\n        relevance: 0,\n        variants: [\n            {\n                begin: /'/,\n                end: /'/\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /\\S+/\n            }\n        ],\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            TEMPLATE_VARIABLES\n        ]\n    };\n    // Strings inside of value containers (objects) can't contain braces,\n    // brackets, or commas\n    var CONTAINER_STRING = hljs.inherit(STRING, {\n        variants: [\n            {\n                begin: /'/,\n                end: /'/\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /[^\\s,{}[\\]]+/\n            }\n        ]\n    });\n    var DATE_RE = \"[0-9]{4}(-[0-9][0-9]){0,2}\";\n    var TIME_RE = \"([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?\";\n    var FRACTION_RE = \"(\\\\.[0-9]*)?\";\n    var ZONE_RE = \"([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\";\n    var TIMESTAMP = {\n        className: \"number\",\n        begin: \"\\\\b\" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + \"\\\\b\"\n    };\n    var VALUE_CONTAINER = {\n        end: \",\",\n        endsWithParent: true,\n        excludeEnd: true,\n        contains: [],\n        keywords: LITERALS,\n        relevance: 0\n    };\n    var OBJECT = {\n        begin: /\\{/,\n        end: /\\}/,\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    var ARRAY = {\n        begin: \"\\\\[\",\n        end: \"\\\\]\",\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    var MODES = [\n        KEY,\n        {\n            className: \"meta\",\n            begin: \"^---\\\\s*$\",\n            relevance: 10\n        },\n        {\n            // Blocks start with a | or > followed by a newline\n            //\n            // Indentation of subsequent lines must be the same to\n            // be considered part of the block\n            className: \"string\",\n            begin: \"[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*\"\n        },\n        {\n            begin: \"<%[%=-]?\",\n            end: \"[%-]?%>\",\n            subLanguage: \"ruby\",\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0\n        },\n        {\n            className: \"type\",\n            begin: \"!\\\\w+!\" + URI_CHARACTERS\n        },\n        // https://yaml.org/spec/1.2/spec.html#id2784064\n        {\n            className: \"type\",\n            begin: \"!<\" + URI_CHARACTERS + \">\"\n        },\n        {\n            className: \"type\",\n            begin: \"!\" + URI_CHARACTERS\n        },\n        {\n            className: \"type\",\n            begin: \"!!\" + URI_CHARACTERS\n        },\n        {\n            className: \"meta\",\n            begin: \"&\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"meta\",\n            begin: \"\\\\*\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"bullet\",\n            // TODO: remove |$ hack when we have proper look-ahead support\n            begin: \"-(?=[ ]|$)\",\n            relevance: 0\n        },\n        hljs.HASH_COMMENT_MODE,\n        {\n            beginKeywords: LITERALS,\n            keywords: {\n                literal: LITERALS\n            }\n        },\n        TIMESTAMP,\n        // numbers are any valid C-style number that\n        // sit isolated from other words\n        {\n            className: \"number\",\n            begin: hljs.C_NUMBER_RE + \"\\\\b\",\n            relevance: 0\n        },\n        OBJECT,\n        ARRAY,\n        STRING\n    ];\n    var VALUE_MODES = [\n        ...MODES\n    ];\n    VALUE_MODES.pop();\n    VALUE_MODES.push(CONTAINER_STRING);\n    VALUE_CONTAINER.contains = VALUE_MODES;\n    return {\n        name: \"YAML\",\n        case_insensitive: true,\n        aliases: [\n            \"yml\",\n            \"YAML\"\n        ],\n        contains: MODES\n    };\n}\nmodule.exports = yaml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/languages/yaml.js\n");

/***/ })

};
;