"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vfile-message";
exports.ids = ["vendor-chunks/vfile-message"];
exports.modules = {

/***/ "(ssr)/./node_modules/vfile-message/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/vfile-message/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VFileMessage: () => (/* binding */ VFileMessage)\n/* harmony export */ });\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */ \n/**\n * Message.\n */ class VFileMessage extends Error {\n    /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > üëâ **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */ // To do: next major: expose `undefined` everywhere instead of `null`.\n    constructor(reason, place, origin){\n        /** @type {[string | null, string | null]} */ const parts = [\n            null,\n            null\n        ];\n        /** @type {Position} */ let position = {\n            // @ts-expect-error: we always follows the structure of `position`.\n            start: {\n                line: null,\n                column: null\n            },\n            // @ts-expect-error: \"\n            end: {\n                line: null,\n                column: null\n            }\n        };\n        super();\n        if (typeof place === \"string\") {\n            origin = place;\n            place = undefined;\n        }\n        if (typeof origin === \"string\") {\n            const index = origin.indexOf(\":\");\n            if (index === -1) {\n                parts[1] = origin;\n            } else {\n                parts[0] = origin.slice(0, index);\n                parts[1] = origin.slice(index + 1);\n            }\n        }\n        if (place) {\n            // Node.\n            if (\"type\" in place || \"position\" in place) {\n                if (place.position) {\n                    // To do: next major: deep clone.\n                    // @ts-expect-error: looks like a position.\n                    position = place.position;\n                }\n            } else if (\"start\" in place || \"end\" in place) {\n                // @ts-expect-error: looks like a position.\n                // To do: next major: deep clone.\n                position = place;\n            } else if (\"line\" in place || \"column\" in place) {\n                // To do: next major: deep clone.\n                position.start = place;\n            }\n        }\n        // Fields from `Error`.\n        /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */ this.name = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__.stringifyPosition)(place) || \"1:1\";\n        /**\n     * Reason for message.\n     *\n     * @type {string}\n     */ this.message = typeof reason === \"object\" ? reason.message : reason;\n        /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */ this.stack = \"\";\n        if (typeof reason === \"object\" && reason.stack) {\n            this.stack = reason.stack;\n        }\n        /**\n     * Reason for message.\n     *\n     * > üëâ **Note**: you should use markdown.\n     *\n     * @type {string}\n     */ this.reason = this.message;\n        /* eslint-disable no-unused-expressions */ /**\n     * State of problem.\n     *\n     * * `true` ‚Äî marks associated file as no longer processable (error)\n     * * `false` ‚Äî necessitates a (potential) change (warning)\n     * * `null | undefined` ‚Äî for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */ this.fatal;\n        /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */ this.line = position.start.line;\n        /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */ this.column = position.start.column;\n        /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */ this.position = position;\n        /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */ this.source = parts[0];\n        /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */ this.ruleId = parts[1];\n        /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */ this.file;\n        // The following fields are ‚Äúwell known‚Äù.\n        // Not standard.\n        // Feel free to add other non-standard fields to your messages.\n        /**\n     * Specify the source value that‚Äôs being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */ this.actual;\n        /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */ this.expected;\n        /**\n     * Link to docs for the message.\n     *\n     * > üëâ **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */ this.url;\n        /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */ this.note;\n    /* eslint-enable no-unused-expressions */ }\n}\nVFileMessage.prototype.file = \"\";\nVFileMessage.prototype.name = \"\";\nVFileMessage.prototype.reason = \"\";\nVFileMessage.prototype.message = \"\";\nVFileMessage.prototype.stack = \"\";\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vfile-message/lib/index.js\n");

/***/ })

};
;