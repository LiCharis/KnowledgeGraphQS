/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/through";
exports.ids = ["vendor-chunks/through"];
exports.modules = {

/***/ "(ssr)/./node_modules/through/index.js":
/*!***************************************!*\
  !*** ./node_modules/through/index.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\");\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\nexports = module.exports = through;\nthrough.through = through;\n//create a readable writable stream.\nfunction through(write, end, opts) {\n    write = write || function(data) {\n        this.queue(data);\n    };\n    end = end || function() {\n        this.queue(null);\n    };\n    var ended = false, destroyed = false, buffer = [], _ended = false;\n    var stream = new Stream();\n    stream.readable = stream.writable = true;\n    stream.paused = false;\n    //  stream.autoPause   = !(opts && opts.autoPause   === false)\n    stream.autoDestroy = !(opts && opts.autoDestroy === false);\n    stream.write = function(data) {\n        write.call(this, data);\n        return !stream.paused;\n    };\n    function drain() {\n        while(buffer.length && !stream.paused){\n            var data = buffer.shift();\n            if (null === data) return stream.emit(\"end\");\n            else stream.emit(\"data\", data);\n        }\n    }\n    stream.queue = stream.push = function(data) {\n        //    console.error(ended)\n        if (_ended) return stream;\n        if (data === null) _ended = true;\n        buffer.push(data);\n        drain();\n        return stream;\n    };\n    //this will be registered as the first 'end' listener\n    //must call destroy next tick, to make sure we're after any\n    //stream piped from here.\n    //this is only a problem if end is not emitted synchronously.\n    //a nicer way to do this is to make sure this is the last listener for 'end'\n    stream.on(\"end\", function() {\n        stream.readable = false;\n        if (!stream.writable && stream.autoDestroy) process.nextTick(function() {\n            stream.destroy();\n        });\n    });\n    function _end() {\n        stream.writable = false;\n        end.call(stream);\n        if (!stream.readable && stream.autoDestroy) stream.destroy();\n    }\n    stream.end = function(data) {\n        if (ended) return;\n        ended = true;\n        if (arguments.length) stream.write(data);\n        _end() // will emit or queue\n        ;\n        return stream;\n    };\n    stream.destroy = function() {\n        if (destroyed) return;\n        destroyed = true;\n        ended = true;\n        buffer.length = 0;\n        stream.writable = stream.readable = false;\n        stream.emit(\"close\");\n        return stream;\n    };\n    stream.pause = function() {\n        if (stream.paused) return;\n        stream.paused = true;\n        return stream;\n    };\n    stream.resume = function() {\n        if (stream.paused) {\n            stream.paused = false;\n            stream.emit(\"resume\");\n        }\n        drain();\n        //may have become paused again,\n        //as drain emits 'data'.\n        if (!stream.paused) stream.emit(\"drain\");\n        return stream;\n    };\n    return stream;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxFQUFFO1lBQ2hCSCxPQUFPRyxNQUFNLEdBQUc7WUFDaEJILE9BQU9TLElBQUksQ0FBQztRQUNkO1FBQ0FIO1FBQ0EsK0JBQStCO1FBQy9CLHdCQUF3QjtRQUN4QixJQUFHLENBQUNOLE9BQU9HLE1BQU0sRUFDZkgsT0FBT1MsSUFBSSxDQUFDO1FBQ2QsT0FBT1Q7SUFDVDtJQUNBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Lbm93bGVkZ2VHcmFwaFFTLy4vbm9kZV9tb2R1bGVzL3Rocm91Z2gvaW5kZXguanM/YzY1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcblxuLy8gdGhyb3VnaFxuLy9cbi8vIGEgc3RyZWFtIHRoYXQgZG9lcyBub3RoaW5nIGJ1dCByZS1lbWl0IHRoZSBpbnB1dC5cbi8vIHVzZWZ1bCBmb3IgYWdncmVnYXRpbmcgYSBzZXJpZXMgb2YgY2hhbmdpbmcgYnV0IG5vdCBlbmRpbmcgc3RyZWFtcyBpbnRvIG9uZSBzdHJlYW0pXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHRocm91Z2hcbnRocm91Z2gudGhyb3VnaCA9IHRocm91Z2hcblxuLy9jcmVhdGUgYSByZWFkYWJsZSB3cml0YWJsZSBzdHJlYW0uXG5cbmZ1bmN0aW9uIHRocm91Z2ggKHdyaXRlLCBlbmQsIG9wdHMpIHtcbiAgd3JpdGUgPSB3cml0ZSB8fCBmdW5jdGlvbiAoZGF0YSkgeyB0aGlzLnF1ZXVlKGRhdGEpIH1cbiAgZW5kID0gZW5kIHx8IGZ1bmN0aW9uICgpIHsgdGhpcy5xdWV1ZShudWxsKSB9XG5cbiAgdmFyIGVuZGVkID0gZmFsc2UsIGRlc3Ryb3llZCA9IGZhbHNlLCBidWZmZXIgPSBbXSwgX2VuZGVkID0gZmFsc2VcbiAgdmFyIHN0cmVhbSA9IG5ldyBTdHJlYW0oKVxuICBzdHJlYW0ucmVhZGFibGUgPSBzdHJlYW0ud3JpdGFibGUgPSB0cnVlXG4gIHN0cmVhbS5wYXVzZWQgPSBmYWxzZVxuXG4vLyAgc3RyZWFtLmF1dG9QYXVzZSAgID0gIShvcHRzICYmIG9wdHMuYXV0b1BhdXNlICAgPT09IGZhbHNlKVxuICBzdHJlYW0uYXV0b0Rlc3Ryb3kgPSAhKG9wdHMgJiYgb3B0cy5hdXRvRGVzdHJveSA9PT0gZmFsc2UpXG5cbiAgc3RyZWFtLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB3cml0ZS5jYWxsKHRoaXMsIGRhdGEpXG4gICAgcmV0dXJuICFzdHJlYW0ucGF1c2VkXG4gIH1cblxuICBmdW5jdGlvbiBkcmFpbigpIHtcbiAgICB3aGlsZShidWZmZXIubGVuZ3RoICYmICFzdHJlYW0ucGF1c2VkKSB7XG4gICAgICB2YXIgZGF0YSA9IGJ1ZmZlci5zaGlmdCgpXG4gICAgICBpZihudWxsID09PSBkYXRhKVxuICAgICAgICByZXR1cm4gc3RyZWFtLmVtaXQoJ2VuZCcpXG4gICAgICBlbHNlXG4gICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgZGF0YSlcbiAgICB9XG4gIH1cblxuICBzdHJlYW0ucXVldWUgPSBzdHJlYW0ucHVzaCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICBjb25zb2xlLmVycm9yKGVuZGVkKVxuICAgIGlmKF9lbmRlZCkgcmV0dXJuIHN0cmVhbVxuICAgIGlmKGRhdGEgPT09IG51bGwpIF9lbmRlZCA9IHRydWVcbiAgICBidWZmZXIucHVzaChkYXRhKVxuICAgIGRyYWluKClcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICAvL3RoaXMgd2lsbCBiZSByZWdpc3RlcmVkIGFzIHRoZSBmaXJzdCAnZW5kJyBsaXN0ZW5lclxuICAvL211c3QgY2FsbCBkZXN0cm95IG5leHQgdGljaywgdG8gbWFrZSBzdXJlIHdlJ3JlIGFmdGVyIGFueVxuICAvL3N0cmVhbSBwaXBlZCBmcm9tIGhlcmUuXG4gIC8vdGhpcyBpcyBvbmx5IGEgcHJvYmxlbSBpZiBlbmQgaXMgbm90IGVtaXR0ZWQgc3luY2hyb25vdXNseS5cbiAgLy9hIG5pY2VyIHdheSB0byBkbyB0aGlzIGlzIHRvIG1ha2Ugc3VyZSB0aGlzIGlzIHRoZSBsYXN0IGxpc3RlbmVyIGZvciAnZW5kJ1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlXG4gICAgaWYoIXN0cmVhbS53cml0YWJsZSAmJiBzdHJlYW0uYXV0b0Rlc3Ryb3kpXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKVxuICAgICAgfSlcbiAgfSlcblxuICBmdW5jdGlvbiBfZW5kICgpIHtcbiAgICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZVxuICAgIGVuZC5jYWxsKHN0cmVhbSlcbiAgICBpZighc3RyZWFtLnJlYWRhYmxlICYmIHN0cmVhbS5hdXRvRGVzdHJveSlcbiAgICAgIHN0cmVhbS5kZXN0cm95KClcbiAgfVxuXG4gIHN0cmVhbS5lbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmKGVuZGVkKSByZXR1cm5cbiAgICBlbmRlZCA9IHRydWVcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoKSBzdHJlYW0ud3JpdGUoZGF0YSlcbiAgICBfZW5kKCkgLy8gd2lsbCBlbWl0IG9yIHF1ZXVlXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYoZGVzdHJveWVkKSByZXR1cm5cbiAgICBkZXN0cm95ZWQgPSB0cnVlXG4gICAgZW5kZWQgPSB0cnVlXG4gICAgYnVmZmVyLmxlbmd0aCA9IDBcbiAgICBzdHJlYW0ud3JpdGFibGUgPSBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZVxuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKHN0cmVhbS5wYXVzZWQpIHJldHVyblxuICAgIHN0cmVhbS5wYXVzZWQgPSB0cnVlXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihzdHJlYW0ucGF1c2VkKSB7XG4gICAgICBzdHJlYW0ucGF1c2VkID0gZmFsc2VcbiAgICAgIHN0cmVhbS5lbWl0KCdyZXN1bWUnKVxuICAgIH1cbiAgICBkcmFpbigpXG4gICAgLy9tYXkgaGF2ZSBiZWNvbWUgcGF1c2VkIGFnYWluLFxuICAgIC8vYXMgZHJhaW4gZW1pdHMgJ2RhdGEnLlxuICAgIGlmKCFzdHJlYW0ucGF1c2VkKVxuICAgICAgc3RyZWFtLmVtaXQoJ2RyYWluJylcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cbiAgcmV0dXJuIHN0cmVhbVxufVxuXG4iXSwibmFtZXMiOlsiU3RyZWFtIiwicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJ0aHJvdWdoIiwid3JpdGUiLCJlbmQiLCJvcHRzIiwiZGF0YSIsInF1ZXVlIiwiZW5kZWQiLCJkZXN0cm95ZWQiLCJidWZmZXIiLCJfZW5kZWQiLCJzdHJlYW0iLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwicGF1c2VkIiwiYXV0b0Rlc3Ryb3kiLCJjYWxsIiwiZHJhaW4iLCJsZW5ndGgiLCJzaGlmdCIsImVtaXQiLCJwdXNoIiwib24iLCJwcm9jZXNzIiwibmV4dFRpY2siLCJkZXN0cm95IiwiX2VuZCIsImFyZ3VtZW50cyIsInBhdXNlIiwicmVzdW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/through/index.js\n");

/***/ })

};
;