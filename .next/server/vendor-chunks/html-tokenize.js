/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-tokenize";
exports.ids = ["vendor-chunks/html-tokenize"];
exports.modules = {

/***/ "(ssr)/./node_modules/html-tokenize/index.js":
/*!*********************************************!*\
  !*** ./node_modules/html-tokenize/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var bufferFrom = __webpack_require__(/*! buffer-from */ \"(ssr)/./node_modules/buffer-from/index.js\");\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\").Transform);\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\ninherits(Tokenize, Transform);\nmodule.exports = Tokenize;\nvar codes = {\n    lt: \"<\".charCodeAt(0),\n    gt: \">\".charCodeAt(0),\n    slash: \"/\".charCodeAt(0),\n    dquote: '\"'.charCodeAt(0),\n    squote: \"'\".charCodeAt(0),\n    equal: \"=\".charCodeAt(0)\n};\nvar strings = {\n    endScript: bufferFrom(\"</script\"),\n    endStyle: bufferFrom(\"</style\"),\n    endTitle: bufferFrom(\"</title\"),\n    comment: bufferFrom(\"<!--\"),\n    endComment: bufferFrom(\"-->\"),\n    cdata: bufferFrom(\"<![CDATA[\"),\n    endCdata: bufferFrom(\"]]>\")\n};\nvar states = {\n    \"TagNameState\": 1,\n    \"AttributeNameState\": 2,\n    \"BeforeAttributeValueState\": 3,\n    \"AttributeValueState\": 4\n};\nfunction Tokenize() {\n    if (!(this instanceof Tokenize)) return new Tokenize;\n    Transform.call(this);\n    this._readableState.objectMode = true;\n    this.state = \"text\";\n    this.tagState = null;\n    this.quoteState = null;\n    this.raw = null;\n    this.buffers = [];\n    this._last = [];\n}\nTokenize.prototype._transform = function(buf, enc, next) {\n    var i = 0;\n    var offset = 0;\n    if (this._prev) {\n        buf = Buffer.concat([\n            this._prev,\n            buf\n        ]);\n        i = this._prev.length - 1;\n        offset = this._offset;\n        this._prev = null;\n        this._offset = 0;\n    }\n    for(; i < buf.length; i++){\n        var b = buf[i];\n        this._last.push(b);\n        if (this._last.length > 9) this._last.shift();\n        // detect end of raw character mode (comment, script,..)\n        if (this.raw) {\n            var parts = this._testRaw(buf, offset, i);\n            if (parts) {\n                this.push([\n                    \"text\",\n                    parts[0]\n                ]);\n                if (this.raw === strings.endComment || this.raw === strings.endCdata) {\n                    this.state = \"text\";\n                    this.buffers = [];\n                    this.push([\n                        \"close\",\n                        parts[1]\n                    ]);\n                } else {\n                    this.state = \"open\";\n                    this.buffers = [\n                        parts[1]\n                    ];\n                }\n                this.raw = null;\n                offset = i + 1;\n            }\n        } else if (this.state === \"text\" && b === codes.lt && i === buf.length - 1) {\n            this._prev = buf;\n            this._offset = offset;\n            return next();\n        } else if (this.state === \"text\" && b === codes.lt && !isWhiteSpace(buf[i + 1])) {\n            if (i > 0 && i - offset > 0) {\n                this.buffers.push(buf.slice(offset, i));\n            }\n            offset = i;\n            this.state = \"open\";\n            this.tagState = states.TagNameState;\n            this._pushState(\"text\");\n        } else if (this.tagState === states.TagNameState && isWhiteSpace(b)) {\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeNameState && b === codes.equal) {\n            this.tagState = states.BeforeAttributeValueState;\n        } else if (this.tagState === states.BeforeAttributeValueState && isWhiteSpace(b)) {} else if (this.tagState === states.BeforeAttributeValueState && b !== codes.gt) {\n            this.tagState = states.AttributeValueState;\n            if (b === codes.dquote) {\n                this.quoteState = \"double\";\n            } else if (b === codes.squote) {\n                this.quoteState = \"single\";\n            } else {\n                this.quoteState = null;\n            }\n        } else if (this.tagState === states.AttributeValueState && !this.quoteState && isWhiteSpace(b)) {\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeValueState && this.quoteState === \"double\" && b === codes.dquote) {\n            this.quoteState = null;\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeValueState && this.quoteState === \"single\" && b === codes.squote) {\n            this.quoteState = null;\n            this.tagState = states.AttributeNameState;\n        } else if (this.state === \"open\" && b === codes.gt && !this.quoteState) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.tagState = null;\n            if (this._getChar(1) === codes.slash) {\n                this._pushState(\"close\");\n            } else {\n                var tag = this._getTag();\n                if (tag === \"script\") this.raw = strings.endScript;\n                if (tag === \"style\") this.raw = strings.endStyle;\n                if (tag === \"title\") this.raw = strings.endTitle;\n                this._pushState(\"open\");\n            }\n        } else if (this.state === \"open\" && compare(this._last, strings.comment)) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.raw = strings.endComment;\n            this._pushState(\"open\");\n        } else if (this.state === \"open\" && compare(this._last, strings.cdata)) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.raw = strings.endCdata;\n            this._pushState(\"open\");\n        }\n    }\n    if (offset < buf.length) this.buffers.push(buf.slice(offset));\n    next();\n};\nTokenize.prototype._flush = function(next) {\n    if (this.state === \"text\") this._pushState(\"text\");\n    this.push(null);\n    next();\n};\nTokenize.prototype._pushState = function(ev) {\n    if (this.buffers.length === 0) return;\n    var buf = Buffer.concat(this.buffers);\n    this.buffers = [];\n    this.push([\n        ev,\n        buf\n    ]);\n};\nTokenize.prototype._getChar = function(i) {\n    var offset = 0;\n    for(var j = 0; j < this.buffers.length; j++){\n        var buf = this.buffers[j];\n        if (offset + buf.length > i) {\n            return buf[i - offset];\n        }\n        offset += buf;\n    }\n};\nTokenize.prototype._getTag = function() {\n    var offset = 0;\n    var tag = \"\";\n    for(var j = 0; j < this.buffers.length; j++){\n        var buf = this.buffers[j];\n        for(var k = 0; k < buf.length; k++){\n            if (offset === 0 && k === 0) continue;\n            var c = String.fromCharCode(buf[k]);\n            if (/[^\\w-!\\[\\]]/.test(c)) {\n                return tag.toLowerCase();\n            } else tag += c;\n        }\n        offset += buf.length;\n    }\n};\nTokenize.prototype._testRaw = function(buf, offset, index) {\n    var raw = this.raw, last = this._last;\n    if (!compare(last, raw)) return;\n    this.buffers.push(buf.slice(offset, index + 1));\n    var buf = Buffer.concat(this.buffers);\n    var k = buf.length - raw.length;\n    return [\n        buf.slice(0, k),\n        buf.slice(k)\n    ];\n};\nfunction compare(a, b) {\n    if (a.length < b.length) return false;\n    for(var i = a.length - 1, j = b.length - 1; i >= 0 && j >= 0; i--, j--){\n        if (lower(a[i]) !== lower(b[j])) return false;\n    }\n    return true;\n}\nfunction lower(n) {\n    if (n >= 65 && n <= 90) return n + 32;\n    return n;\n}\nfunction isWhiteSpace(b) {\n    return b === 0x20 || b === 0x09 || b === 0x0A || b === 0x0C || b === 0x0D;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/index.js\n");

/***/ })

};
;